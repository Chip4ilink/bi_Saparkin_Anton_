{"version":3,"file":"index.js","mappings":";;;;;;;;;;;;;;AAAA;AAC6G;AACjB;AAC5F,8BAA8B,mFAA2B,CAAC,4FAAqC;AAC/F;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,wFAAwF,YAAY,aAAa,WAAW,OAAO,KAAK,YAAY,WAAW,UAAU,UAAU,YAAY,aAAa,OAAO,KAAK,YAAY,OAAO,KAAK,YAAY,OAAO,KAAK,YAAY,OAAO,KAAK,YAAY,OAAO,KAAK,YAAY,OAAO,KAAK,UAAU,MAAM,KAAK,UAAU,YAAY,OAAO,KAAK,YAAY,WAAW,OAAO,KAAK,YAAY,WAAW,MAAM,KAAK,YAAY,aAAa,OAAO,KAAK,YAAY,WAAW,UAAU,UAAU,YAAY,OAAO,KAAK,YAAY,OAAO,KAAK,UAAU,UAAU,YAAY,OAAO,KAAK,YAAY,OAAO,KAAK,YAAY,OAAO,KAAK,YAAY,OAAO,KAAK,YAAY,OAAO,KAAK,YAAY,OAAO,KAAK,YAAY,OAAO,KAAK,YAAY,OAAO,KAAK,UAAU,YAAY,WAAW,YAAY,WAAW,OAAO,KAAK,YAAY,OAAO,KAAK,KAAK,UAAU,MAAM,KAAK,YAAY,OAAO,KAAK,YAAY,MAAM,MAAM,KAAK,UAAU,MAAM,KAAK,YAAY,OAAO,KAAK,YAAY,OAAO,KAAK,YAAY,OAAO,KAAK,UAAU,OAAO,KAAK,UAAU,MAAM,OAAO,UAAU,UAAU,MAAM,OAAO,UAAU,UAAU,MAAM,OAAO,YAAY,OAAO,KAAK,UAAU,OAAO,KAAK,UAAU,MAAM,KAAK,UAAU,MAAM,KAAK,UAAU,0CAA0C,kCAAkC,0BAA0B,oBAAoB,GAAG,qBAAqB,kCAAkC,iBAAiB,gBAAgB,kBAAkB,4BAA4B,4BAA4B,GAAG,2BAA2B,+BAA+B,GAAG,wBAAwB,qBAAqB,GAAG,2BAA2B,0CAA0C,GAAG,0CAA0C,iCAAiC,GAAG,yBAAyB,0CAA0C,GAAG,4BAA4B,gBAAgB,GAAG,kCAAkC,kBAAkB,wBAAwB,GAAG,iCAAiC,iDAAiD,oBAAoB,GAAG,kCAAkC,qBAAqB,kBAAkB,GAAG,4BAA4B,0BAA0B,kCAAkC,GAAG,kCAAkC,uBAAuB,kBAAkB,iBAAiB,gBAAgB,wBAAwB,GAAG,sCAAsC,yBAAyB,GAAG,wCAAwC,iBAAiB,kBAAkB,gCAAgC,GAAG,+BAA+B,mEAAmE,GAAG,kCAAkC,uEAAuE,GAAG,qCAAqC,uCAAuC,GAAG,6BAA6B,yCAAyC,GAAG,mCAAmC,uCAAuC,GAAG,8BAA8B,2CAA2C,GAAG,oCAAoC,uCAAuC,GAAG,kCAAkC,kBAAkB,wBAAwB,oBAAoB,wBAAwB,oBAAoB,GAAG,wCAAwC,qBAAqB,GAAG,gCAAgC,kDAAkD,oBAAoB,KAAK,oDAAoD,+BAA+B,KAAK,sDAAsD,wBAAwB,KAAK,GAAG,qBAAqB,kBAAkB,GAAG,oCAAoC,uBAAuB,GAAG,kCAAkC,uBAAuB,GAAG,+BAA+B,sBAAsB,GAAG,2CAA2C,oBAAoB,GAAG,qBAAqB,WAAW,kBAAkB,KAAK,GAAG,8IAA8I,oBAAoB,iBAAiB,GAAG,8LAA8L,oBAAoB,iBAAiB,GAAG,gKAAgK,yBAAyB,GAAG,8DAA8D,oBAAoB,GAAG,4DAA4D,iBAAiB,GAAG,+DAA+D,iBAAiB,GAAG,6DAA6D,gBAAgB,GAAG,qBAAqB;AACr3J;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;ACrM1B;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,qBAAqB,mBAAO,CAAC,GAAY;AACzC,qBAAqB,mBAAO,CAAC,GAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oCAAoC,GAAG,iCAAiC;AACnG;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB,WAAW,GAAG,wCAAwC,IAAI,eAAe;AAC3F;AACA;AACA;AACA,kBAAkB,kCAAkC,IAAI,WAAW,GAAG,sCAAsC,IAAI,YAAY,IAAI,wCAAwC,IAAI,eAAe;AAC3L;AACA;AACA,wBAAwB;;;;;;;;AC5DX;;AAEb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjCa;;AAEb;AACA;AACA,cAAc,KAAwC,GAAG,sBAAiB,GAAG,CAAI;AACjF;AACA;AACA;AACA;AACA;;;;;;;ACTa;;AAEb;AACA;AACA;AACA,kBAAkB,wBAAwB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA,qBAAqB,6BAA6B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnFa;;AAEb;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACba;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,qBAAqB,mBAAO,CAAC,GAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;ACjBlB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,GAAG,qBAAqB;AAC/C,oBAAoB;AACpB,oBAAoB;AACpB,oBAAoB;AACpB,gBAAgB;AAChB,qBAAqB;AACrB,iBAAiB;AACjB,mBAAmB;AACnB,WAAW;AACX,2BAA2B;AAC3B,qBAAqB;AACrB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gCAAgC;AAC9C;AACA;AACA,cAAc,mBAAmB,GAAG,yBAAyB,GAAG,oBAAoB;AACpF;;;;;;;;AC9Fa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,qBAAqB,mBAAO,CAAC,GAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;AClBlB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,uBAAuB,mBAAO,CAAC,GAAc;AAC7C,qBAAqB,mBAAO,CAAC,GAAY;AACzC,6BAA6B,mBAAO,CAAC,GAAsB;AAC3D,kCAAkC,mBAAO,CAAC,GAA2B;AACrE,kCAAkC,mBAAO,CAAC,GAA2B;AACrE,iCAAiC,mBAAO,CAAC,GAA0B;AACnE,kCAAkC,mBAAO,CAAC,GAA2B;AACrE,2BAA2B,mBAAO,CAAC,GAAiC;AACpE,2BAA2B,mBAAO,CAAC,EAAoB;AACvD,uBAAuB,mBAAO,CAAC,GAAgB;AAC/C,qBAAqB,mBAAO,CAAC,GAAc;AAC3C,gBAAgB,mBAAO,CAAC,GAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oHAAoH;AACtI,kBAAkB,sHAAsH;AACxI;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,2HAA2H,+EAA+E;AACvQ,iDAAiD,kEAAkE;AACnH,qBAAqB;AACrB;AACA;AACA;AACA,6DAA6D,8HAA8H,kFAAkF;AAC7Q,iDAAiD,+BAA+B;AAChF,qBAAqB;AACrB;AACA;AACA;AACA,6DAA6D,gIAAgI,8BAA8B;AAC3N;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,wDAAwD;AACxD,0BAA0B,gCAAgC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,+DAA+D;AACrI;AACA;AACA,kEAAkE,yCAAyC;AAC3G;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,gIAAgI,gCAAgC;AAChK;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,iCAAiC;AACjC;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,aAAa;AACb,mCAAmC,6CAA6C;AAChF;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,oCAAoC,MAAM,MAAM,GAAG,KAAK;AAC9G;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mCAAmC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,8BAA8B,kCAAkC;AAChE;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kCAAkC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,8BAA8B,kCAAkC;AAChE;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,WAAW;AAC7E,yCAAyC,sCAAsC;AAC/E;AACA;AACA;AACA;AACA,gEAAgE,oBAAoB;AACpF,wCAAwC,uCAAuC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;;;;;;;AClhBd;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,qBAAqB,mBAAO,CAAC,GAAY;AACzC,4BAA4B,mBAAO,CAAC,GAAqB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,4BAA4B,8BAA8B;AAC1D;AACA,aAAa,+BAA+B;AAC5C,iDAAiD;AACjD,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA,aAAa,+BAA+B;AAC5C;AACA;AACA;AACA,yBAAyB;;;;;;;;AC/BZ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gCAAgC,GAAG,uBAAuB;AAC1D,qBAAqB,mBAAO,CAAC,GAAY;AACzC;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,gCAAgC;AAChC;AACA,uEAAuE,MAAM;AAC7E;AACA,wGAAwG,IAAI;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;;;;;;;;ACrCY;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,uBAAuB,mBAAO,CAAC,GAAc;AAC7C,qBAAqB,mBAAO,CAAC,GAAY;AACzC,gBAAgB,mBAAO,CAAC,GAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0BAA0B;;;;;;;;ACjIb;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,GAAG,cAAc,GAAG,eAAe,GAAG,WAAW,GAAG,cAAc,GAAG,oBAAoB,GAAG,sBAAsB,GAAG,qBAAqB,GAAG,sBAAsB,GAAG,YAAY,GAAG,YAAY,GAAG,cAAc,GAAG,SAAS,GAAG,WAAW,GAAG,UAAU,GAAG,aAAa,GAAG,cAAc,GAAG,oBAAoB,GAAG,sBAAsB,GAAG,YAAY,GAAG,mBAAmB,GAAG,YAAY,GAAG,mBAAmB,GAAG,uBAAuB,GAAG,kBAAkB,GAAG,WAAW;AACve,qCAAqC,mBAAO,CAAC,GAAiB;AAC9D,WAAW;AACX,kBAAkB,2BAA2B,uBAAuB,gCAAgC,mBAAmB,4BAA4B,YAAY,qBAAqB,mBAAmB,4BAA4B,YAAY,qBAAqB,sBAAsB,+BAA+B,oBAAoB,6BAA6B,cAAc,uBAAuB,aAAa,sBAAsB,UAAU,mBAAmB,WAAW,oBAAoB,SAAS,kBAAkB,cAAc,uBAAuB,YAAY,qBAAqB,YAAY,qBAAqB,sBAAsB,+BAA+B,qBAAqB,8BAA8B,sBAAsB,+BAA+B,oBAAoB,6BAA6B,cAAc,uBAAuB,WAAW,oBAAoB,eAAe,wBAAwB,cAAc;AACv7B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,sBAAsB;AACtB;;;;;;;AChBa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA,gDAAgD;AAChD;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,sFAAsF,qBAAqB;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,iDAAiD,qBAAqB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,sDAAsD,qBAAqB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpFa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,cAAc;AACrE;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACfa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACTa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,qBAAqB,mBAAO,CAAC,GAAY;AACzC,gBAAgB,mBAAO,CAAC,GAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,+CAA+C,iDAAiD;AAChG,uFAAuF,gDAAgD;AACvI;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2EAA2E,uDAAuD;AAClI;AACA;AACA;AACA;AACA;AACA,mEAAmE,IAAI;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF;AAClF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,KAAK,uBAAuB,MAAM;AAC/H;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;AClQa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,qBAAqB,mBAAO,CAAC,GAAY;AACzC,uBAAuB,mBAAO,CAAC,GAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;ACrBlB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,uBAAuB,mBAAO,CAAC,GAAc;AAC7C,qBAAqB,mBAAO,CAAC,GAAY;AACzC,gBAAgB,mBAAO,CAAC,GAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;;;;;;;;ACnMa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,uBAAuB,mBAAO,CAAC,GAAc;AAC7C,qBAAqB,mBAAO,CAAC,GAAY;AACzC,2BAA2B,mBAAO,CAAC,GAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,+DAA+D;AACjI;AACA,cAAc,sBAAsB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,2HAA2H,+EAA+E;AACnQ,6CAA6C,kEAAkE;AAC/G,iBAAiB;AACjB;AACA;AACA;AACA,yDAAyD,8HAA8H,kFAAkF;AACzQ,6CAA6C,+BAA+B;AAC5E;AACA;AACA,SAAS;AACT,gDAAgD;AAChD,sBAAsB,gCAAgC;AACtD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,+DAA+D;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,oEAAoE;AACpE;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA,2EAA2E,6EAA6E;AACxJ;AACA;AACA;AACA,+BAA+B;AAC/B,6BAA6B,yCAAyC;AACtE,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT,sBAAsB,aAAa;AACnC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gCAAgC,gBAAgB;AAChD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,2BAA2B,EAAE;AACtE;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,yBAAyB;;;;;;;;AChRZ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,wBAAwB;AACxB,6BAA6B;AAC7B,wBAAwB;AACxB,uBAAuB;AACvB,uBAAuB,mBAAO,CAAC,GAAc;AAC7C,qBAAqB,mBAAO,CAAC,GAAY;AACzC,qBAAqB,mBAAO,CAAC,GAAc;AAC3C,0BAA0B,mBAAO,CAAC,GAAmB;AACrD,gBAAgB,mBAAO,CAAC,GAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wBAAwB,yBAAyB,yBAAyB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS,IAAI,mCAAmC;AAChD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;;;;;;;;ACzJa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB,GAAG,uBAAuB,GAAG,2BAA2B;AAC5E,qBAAqB,mBAAO,CAAC,GAAY;AACzC,qBAAqB,mBAAO,CAAC,GAA4B;AACzD,gBAAgB,mBAAO,CAAC,GAAa;AACrC;AACA;AACA;AACA;AACA,CAAC,0BAA0B,2BAA2B,2BAA2B;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,oCAAoC;AACpC;AACA,0CAA0C;AAC1C;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL,CAAC;AACD;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,MAAM;AACxC;AACA,KAAK;AACL;AACA;AACA,qFAAqF,4EAA4E,GAAG,oDAAoD;AACxN,CAAC;AACD;AACA;AACA;;;;;;;;AClGa;;AAEb;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,yDAAyD;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;;;;;AC5Da;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,uBAAuB,mBAAO,CAAC,GAAc;AAC7C,2BAA2B,mBAAO,CAAC,GAAoB;AACvD,qBAAqB,mBAAO,CAAC,GAAY;AACzC,wBAAwB,mBAAO,CAAC,GAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,OAAO;AAC1E;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,iCAAiC;AACtG;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;AC/LX;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,8BAA8B;AAC9B,qBAAqB,mBAAO,CAAC,GAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;;;;;;;;;;;;;;;;;;;;;;;;;;AChB9B,MAAkG;AAClG,MAAwF;AACxF,MAA+F;AAC/F,MAAkH;AAClH,MAA2G;AAC3G,MAA2G;AAC3G,MAAiL;AACjL;AACA;;AAEA;;AAEA,4BAA4B,qGAAmB;AAC/C,wBAAwB,kHAAa;;AAErC,uBAAuB,uGAAa;AACpC;AACA,iBAAiB,+FAAM;AACvB,6BAA6B,sGAAkB;;AAE/C,aAAa,0GAAG,CAAC,gKAAO;;;;AAI2H;AACnJ,OAAO,iEAAe,gKAAO,IAAI,gKAAO,UAAU,gKAAO,mBAAmB,EAAC;;;;;;;;AC1BhE;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,uBAAuB;AACvB,sBAAsB;AACtB,iBAAiB;AACjB,sBAAsB;AACtB,mBAAmB;AACnB,2BAA2B;AAC3B,qBAAqB,mBAAO,CAAC,GAAY;AACzC,gBAAgB,mBAAO,CAAC,GAAa;AACrC;AACA,cAAc,gCAAgC,EAAE,mCAAmC;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sBAAsB,IAAI,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB,EAAE,mFAAmF;AACnH;AACA;AACA;AACA;AACA,+BAA+B,kCAAkC,GAAG,0CAA0C;AAC9G;AACA;AACA,cAAc,qBAAqB,IAAI,gBAAgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,cAAc,YAAY,MAAM,mBAAmB;AACnD;;;;;;;;AC9Ca;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,qBAAqB,mBAAO,CAAC,GAAY;AACzC,8BAA8B,mBAAO,CAAC,GAAuB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,4BAA4B,8BAA8B;AAC1D;AACA,aAAa,+BAA+B;AAC5C,kDAAkD;AAClD,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA,aAAa,+BAA+B;AAC5C,8BAA8B,sEAAsE;AACpG;AACA;AACA,2BAA2B;;;;;;;UC/B3B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;;;;;;;;;ACAa;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D,uBAAuB,mBAAO,CAAC,GAAc;AAC7C,qBAAqB,mBAAO,CAAC,GAAY;AACzC,8BAA8B,mBAAO,CAAC,GAAqC;AAC3E,4BAA4B,mBAAO,CAAC,GAAkC;AACtE,mBAAO,CAAC,GAAqB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://routes/./src/styles/module.css","webpack://routes/./src/routeManagement/TotalTimeControl.ts","webpack://routes/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://routes/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://routes/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://routes/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://routes/./src/routeManagement/NotActiveRowTransformer.ts","webpack://routes/./src/utils/utils.ts","webpack://routes/./src/routeManagement/FrequencyRowTransformer.ts","webpack://routes/./src/routeManagement/RouteManagementCtrl.ts","webpack://routes/./src/routesApproval/RouteApprovalPage.ts","webpack://routes/./src/routeManagement/RouteWeekColumn.ts","webpack://routes/./src/routeManagement/RoutePointsManager.ts","webpack://routes/./node_modules/mdt-client/dist/index.js","webpack://routes/./node_modules/css-loader/dist/runtime/api.js","webpack://routes/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://routes/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://routes/./src/RouteManager.ts","webpack://routes/./src/routeManagement/RouteRowCellTransformer.ts","webpack://routes/./src/routesApproval/CopyRouteManager.ts","webpack://routes/./src/routesApproval/RouteApprovalCtrl.ts","webpack://routes/./src/routeManagement/RouteColumns.ts","webpack://routes/./src/routesApproval/MatchControls.ts","webpack://routes/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://routes/./src/routesApproval/CopyRouteControl.ts","webpack://routes/./src/routeManagement/NotBoundRowTransformer.ts","webpack://routes/./src/styles/module.css?8067","webpack://routes/./src/routeManagement/Formatters.ts","webpack://routes/./src/routeManagement/RouteManagementPage.ts","webpack://routes/webpack/bootstrap","webpack://routes/webpack/runtime/compat get default export","webpack://routes/webpack/runtime/define property getters","webpack://routes/webpack/runtime/hasOwnProperty shorthand","webpack://routes/webpack/runtime/make namespace object","webpack://routes/webpack/runtime/nonce","webpack://routes/./src/index.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.route-col_cell {\n\tposition: relative !important;\n\tpadding: 0 !important;\n\tmin-width: 60px;\n}\n\n.route-col_wrap {\n\tposition: absolute !important;\n\theight: 100%;\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: flex-start;\n}\n\n.route-col_wrap .icon {\n\tfont-size: 12px !important;\n}\n\n.route-col_val-num {\n\tmargin: auto 4px;\n}\n\n.route-col_icon-check {\n\tcolor: var(--mdt-color-brand-success);\n}\n\n.route-col_val-many > *:nth-child(2) {\n\tmargin-left: -4px !important;\n}\n\n.route-col_val-flag {\n\tcolor: var(--mdt-color-brand-warning);\n}\n\n.route-col_header-link {\n\twidth: 80px;\n}\n\n.route-col_header-link > div {\n\tdisplay: flex;\n\talign-items: center;\n}\n\n.route-col_header-link span {\n\tborder-bottom: 1px dashed var(--mdt-body-bg);\n\tcursor: pointer;\n}\n\n.route-col_header-link input {\n\tmargin-left: 8px;\n\tmargin-top: 0;\n}\n\n.route-col_inline-cell {\n\tpadding: 0 !important;\n\tposition: relative !important;\n}\n\n.route-col_inline-cell > div {\n\tposition: absolute;\n\tdisplay: flex;\n\theight: 100%;\n\twidth: 100%;\n\talign-items: center;\n}\n\n.route-col_inline-cell > div div {\n\tmargin: 0 !important;\n}\n\n.route-col_inline-cell > div input {\n\tborder: none;\n\toutline: none;\n\tbox-shadow: none !important;\n}\n\n.route-row_incorrect_freq {\n\tbackground-color: var(--mdt-gray-elements-bg-color) !important;\n}\n\n.route-row_incorrect_freq td {\n\tborder-color: var(--mdt-common-components-border-color) !important;\n}\n\n.route-row_incorrect_freq input {\n\tbackground: transparent !important;\n}\n\n.route-row_is-not-bound {\n\tbackground-color: #fffacf !important;\n}\n\n.route-row_is-not-bound input {\n\tbackground: transparent !important;\n}\n\n.route-row_is-not-active {\n\tbackground-color: #ff696973 !important;\n}\n\n.route-row_is-not-active input {\n\tbackground: transparent !important;\n}\n\n.route-management-total-time {\n\tdisplay: flex;\n\talign-items: center;\n\tpadding: 0 10px;\n\twhite-space: nowrap;\n\tcursor: pointer;\n}\n\n.route-management-total-time .icon {\n\tmargin-left: 5px;\n}\n\n@media (max-width: 1300px) {\n\t.route-management-page .page-block-head > h1 {\n\t\tdisplay: none;\n\t}\n\n\t.route-management-page .switch-buttons_label {\n\t\tdisplay: none !important;\n\t}\n\n\t.route-management-page .switch-buttons_buttons {\n\t\tmargin-left: 10px;\n\t}\n}\n\n.select-wrapper {\n\tdisplay: flex;\n}\n\n.select-wrapper .selected-info {\n\tmargin-right: 10px;\n}\n\n.select-wrapper .select-icon {\n\talign-self: center;\n}\n\n.select-wrapper .calendar {\n\tmargin-left: 10px;\n}\n\n.routes-time-transfer .common-control {\n\tmin-width: 50px;\n}\n\n.routes-copy-to .grid {\n\t\twidth: 100%;\n\t}\n\n.page-header-controls .routes-cycle-picker,\n.page-header-controls .routes-position-picker,\n.page-header-controls .routes-time-transfer {\n\tmargin-top: 0px;\n\theight: auto;\n}\n\n.page-header-controls .routes-cycle-picker .picker-control,\n.page-header-controls .routes-position-picker .picker-control,\n.page-header-controls .routes-time-transfer .picker-control {\n\tmargin-top: 0px;\n\theight: auto;\n}\n\n.page-header-controls .routes-cycle-picker label,\n.page-header-controls .routes-position-picker label,\n.page-header-controls .routes-time-transfer label {\n\tdisplay: inline-flex;\n}\n\n.page-header-controls .route-management-total-time .icon {\n\tfont-size: 15px;\n}\n\n.page-header-controls .routes-cycle-picker label + div {\n\twidth: 180px;\n}\n\n.page-header-controls .routes-position-picker label + div {\n\twidth: 300px;\n}\n\n.page-header-controls .routes-time-transfer label + div {\n\twidth: 60px;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/styles/module.css\"],\"names\":[],\"mappings\":\"AAAA;CACC,6BAA6B;CAC7B,qBAAqB;CACrB,eAAe;AAChB;;AAEA;CACC,6BAA6B;CAC7B,YAAY;CACZ,WAAW;CACX,aAAa;CACb,uBAAuB;CACvB,uBAAuB;AACxB;;AAEA;CACC,0BAA0B;AAC3B;;AAEA;CACC,gBAAgB;AACjB;;AAEA;CACC,qCAAqC;AACtC;;AAEA;CACC,4BAA4B;AAC7B;;AAEA;CACC,qCAAqC;AACtC;;AAEA;CACC,WAAW;AACZ;;AAEA;CACC,aAAa;CACb,mBAAmB;AACpB;;AAEA;CACC,4CAA4C;CAC5C,eAAe;AAChB;;AAEA;CACC,gBAAgB;CAChB,aAAa;AACd;;AAEA;CACC,qBAAqB;CACrB,6BAA6B;AAC9B;;AAEA;CACC,kBAAkB;CAClB,aAAa;CACb,YAAY;CACZ,WAAW;CACX,mBAAmB;AACpB;;AAEA;CACC,oBAAoB;AACrB;;AAEA;CACC,YAAY;CACZ,aAAa;CACb,2BAA2B;AAC5B;;AAEA;CACC,8DAA8D;AAC/D;;AAEA;CACC,kEAAkE;AACnE;;AAEA;CACC,kCAAkC;AACnC;;AAEA;CACC,oCAAoC;AACrC;;AAEA;CACC,kCAAkC;AACnC;;AAEA;CACC,sCAAsC;AACvC;;AAEA;CACC,kCAAkC;AACnC;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,eAAe;CACf,mBAAmB;CACnB,eAAe;AAChB;;AAEA;CACC,gBAAgB;AACjB;;AAEA;CACC;EACC,aAAa;CACd;;CAEA;EACC,wBAAwB;CACzB;;CAEA;EACC,iBAAiB;CAClB;AACD;;AAEA;CACC,aAAa;AACd;;AAEA;CACC,kBAAkB;AACnB;;AAEA;CACC,kBAAkB;AACnB;;AAEA;CACC,iBAAiB;AAClB;;AAEA;CACC,eAAe;AAChB;;AAGC;EACC,WAAW;CACZ;;AAGD;;;CAGC,eAAe;CACf,YAAY;AACb;;AAEA;;;CAGC,eAAe;CACf,YAAY;AACb;;AAEA;;;CAGC,oBAAoB;AACrB;;AAEA;CACC,eAAe;AAChB;;AAEA;CACC,YAAY;AACb;;AAEA;CACC,YAAY;AACb;;AAEA;CACC,WAAW;AACZ\",\"sourcesContent\":[\".route-col_cell {\\n\\tposition: relative !important;\\n\\tpadding: 0 !important;\\n\\tmin-width: 60px;\\n}\\n\\n.route-col_wrap {\\n\\tposition: absolute !important;\\n\\theight: 100%;\\n\\twidth: 100%;\\n\\tdisplay: flex;\\n\\tjustify-content: center;\\n\\talign-items: flex-start;\\n}\\n\\n.route-col_wrap .icon {\\n\\tfont-size: 12px !important;\\n}\\n\\n.route-col_val-num {\\n\\tmargin: auto 4px;\\n}\\n\\n.route-col_icon-check {\\n\\tcolor: var(--mdt-color-brand-success);\\n}\\n\\n.route-col_val-many > *:nth-child(2) {\\n\\tmargin-left: -4px !important;\\n}\\n\\n.route-col_val-flag {\\n\\tcolor: var(--mdt-color-brand-warning);\\n}\\n\\n.route-col_header-link {\\n\\twidth: 80px;\\n}\\n\\n.route-col_header-link > div {\\n\\tdisplay: flex;\\n\\talign-items: center;\\n}\\n\\n.route-col_header-link span {\\n\\tborder-bottom: 1px dashed var(--mdt-body-bg);\\n\\tcursor: pointer;\\n}\\n\\n.route-col_header-link input {\\n\\tmargin-left: 8px;\\n\\tmargin-top: 0;\\n}\\n\\n.route-col_inline-cell {\\n\\tpadding: 0 !important;\\n\\tposition: relative !important;\\n}\\n\\n.route-col_inline-cell > div {\\n\\tposition: absolute;\\n\\tdisplay: flex;\\n\\theight: 100%;\\n\\twidth: 100%;\\n\\talign-items: center;\\n}\\n\\n.route-col_inline-cell > div div {\\n\\tmargin: 0 !important;\\n}\\n\\n.route-col_inline-cell > div input {\\n\\tborder: none;\\n\\toutline: none;\\n\\tbox-shadow: none !important;\\n}\\n\\n.route-row_incorrect_freq {\\n\\tbackground-color: var(--mdt-gray-elements-bg-color) !important;\\n}\\n\\n.route-row_incorrect_freq td {\\n\\tborder-color: var(--mdt-common-components-border-color) !important;\\n}\\n\\n.route-row_incorrect_freq input {\\n\\tbackground: transparent !important;\\n}\\n\\n.route-row_is-not-bound {\\n\\tbackground-color: #fffacf !important;\\n}\\n\\n.route-row_is-not-bound input {\\n\\tbackground: transparent !important;\\n}\\n\\n.route-row_is-not-active {\\n\\tbackground-color: #ff696973 !important;\\n}\\n\\n.route-row_is-not-active input {\\n\\tbackground: transparent !important;\\n}\\n\\n.route-management-total-time {\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tpadding: 0 10px;\\n\\twhite-space: nowrap;\\n\\tcursor: pointer;\\n}\\n\\n.route-management-total-time .icon {\\n\\tmargin-left: 5px;\\n}\\n\\n@media (max-width: 1300px) {\\n\\t.route-management-page .page-block-head > h1 {\\n\\t\\tdisplay: none;\\n\\t}\\n\\n\\t.route-management-page .switch-buttons_label {\\n\\t\\tdisplay: none !important;\\n\\t}\\n\\n\\t.route-management-page .switch-buttons_buttons {\\n\\t\\tmargin-left: 10px;\\n\\t}\\n}\\n\\n.select-wrapper {\\n\\tdisplay: flex;\\n}\\n\\n.select-wrapper .selected-info {\\n\\tmargin-right: 10px;\\n}\\n\\n.select-wrapper .select-icon {\\n\\talign-self: center;\\n}\\n\\n.select-wrapper .calendar {\\n\\tmargin-left: 10px;\\n}\\n\\n.routes-time-transfer .common-control {\\n\\tmin-width: 50px;\\n}\\n\\n.routes-copy-to {\\n\\t.grid {\\n\\t\\twidth: 100%;\\n\\t}\\n}\\n\\n.page-header-controls .routes-cycle-picker,\\n.page-header-controls .routes-position-picker,\\n.page-header-controls .routes-time-transfer {\\n\\tmargin-top: 0px;\\n\\theight: auto;\\n}\\n\\n.page-header-controls .routes-cycle-picker .picker-control,\\n.page-header-controls .routes-position-picker .picker-control,\\n.page-header-controls .routes-time-transfer .picker-control {\\n\\tmargin-top: 0px;\\n\\theight: auto;\\n}\\n\\n.page-header-controls .routes-cycle-picker label,\\n.page-header-controls .routes-position-picker label,\\n.page-header-controls .routes-time-transfer label {\\n\\tdisplay: inline-flex;\\n}\\n\\n.page-header-controls .route-management-total-time .icon {\\n\\tfont-size: 15px;\\n}\\n\\n.page-header-controls .routes-cycle-picker label + div {\\n\\twidth: 180px;\\n}\\n\\n.page-header-controls .routes-position-picker label + div {\\n\\twidth: 300px;\\n}\\n\\n.page-header-controls .routes-time-transfer label + div {\\n\\twidth: 60px;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TotalTimeControl = void 0;\nconst mdt_client_1 = require(\"mdt-client\");\nconst Formatters_1 = require(\"./Formatters\");\nclass TotalTimeControl {\n    constructor(ctrl) {\n        this.ctrl = ctrl;\n        this.$view = () => {\n            let ctrl = this.ctrl;\n            let routePointsManager = ctrl.routePointsManager;\n            if (!routePointsManager)\n                return;\n            if (!ctrl.route || !ctrl.position || !ctrl.cycle)\n                return \"\";\n            let weekData = ctrl.getCurrentWeekData();\n            let fullResult = {\n                cycle: routePointsManager.getTotalTimeInPeriod(ctrl.route, ctrl.cycle.DateBegin, ctrl.cycle.DateEnd),\n                week: weekData && weekData.length\n                    ? routePointsManager.getTotalTimeInPeriod(ctrl.route, weekData[0], weekData[weekData.length - 1])\n                    : null,\n                day: ctrl.currentDay ? routePointsManager.getTotalTime(ctrl.route, ctrl.currentDay) : null\n            };\n            let title = mdt_client_1.Utils.getText(\"Total time\") + \"\\n\" + this.formatTotalTimeData(\"Cycle\", fullResult.cycle);\n            if (fullResult.week)\n                title += \"\\n\" + this.formatTotalTimeData(\"Week\", fullResult.week);\n            if (fullResult.day)\n                title += \"\\n\" + this.formatTotalTimeData(\"Day\", fullResult.day);\n            let type = \"cycle\";\n            let value = this.formatLabelValue(fullResult.cycle);\n            if (this.ctrl.currentDay) {\n                type = \"day\";\n                value = this.formatLabelValue(fullResult.day);\n            }\n            else if (this.ctrl.currentWeek != null) {\n                type = \"week\";\n                value = this.formatLabelValue(fullResult.week);\n            }\n            let label = `${mdt_client_1.Utils.getText(\"Time\")} (${mdt_client_1.Utils.getText(type)})`;\n            return (0, mdt_client_1.m)(\".route-management-total-time\", {\n                title: title\n            }, label, \": \", value, mdt_client_1.legacy.ui.el.icon(\"question-circle\"));\n        };\n    }\n    formatValues(data) {\n        let result = {};\n        Object.keys(data).forEach(k => {\n            result[k] = (0, Formatters_1.formatDuration)(data[k] * 60000) || \"0\";\n        });\n        return result;\n    }\n    formatLabelValue(data) {\n        let x = this.formatValues(data);\n        return `${x.timeAll} (${mdt_client_1.Utils.getText(\"transfer\")} - ${x.timeTransfer})`;\n    }\n    formatTotalTimeData(title, x) {\n        let d = this.formatValues(x);\n        return `${mdt_client_1.Utils.getText(title)}: ${d.timeAll} (${mdt_client_1.Utils.getText(\"visits\")} - ${d.timeVisit}, ${mdt_client_1.Utils.getText(\"transfer\")} - ${d.timeTransfer})`;\n    }\n}\nexports.TotalTimeControl = TotalTimeControl;\n","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NotActiveRowTransformer = void 0;\nconst mdt_client_1 = require(\"mdt-client\");\nclass NotActiveRowTransformer {\n    constructor(routePageCtrl) {\n        this.routePageCtrl = routePageCtrl;\n    }\n    $view(ctrl, ctx) {\n        let id = ctx.row.$id;\n        if (!ctx.row.$id)\n            return;\n        let isNotActive = ctrl.routePageCtrl.isNotActive(id);\n        if (isNotActive)\n            mdt_client_1.legacy.ui.m.addClass(ctx.tr, \"route-row_is-not-active\");\n    }\n}\nexports.NotActiveRowTransformer = NotActiveRowTransformer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shortMonthNames = exports.shortDayNames = void 0;\nexports.getDaysArray = getDaysArray;\nexports.getWeeksData = getWeeksData;\nexports.compareDates = compareDates;\nexports.romanize = romanize;\nexports.getTimeValues = getTimeValues;\nexports.uniqArray = uniqArray;\nexports.isDateValid = isDateValid;\nexports.pad = pad;\nexports.toISO8601DateString = toISO8601DateString;\nexports.shortDayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nexports.shortMonthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\nfunction getDaysArray(start, end) {\n    const date = new Date(start.getTime());\n    const arr = [];\n    while (date <= end) {\n        arr.push(new Date(date.getTime()));\n        date.setDate(date.getDate() + 1);\n    }\n    return arr;\n}\nfunction getWeeksData(start, end, lastWeekDayIndex = 0) {\n    let idx = 0;\n    const result = [[]];\n    const dates = getDaysArray(start, end);\n    dates.forEach((date, i) => {\n        result[idx].push(date);\n        if (date.getDay() == lastWeekDayIndex && i < dates.length - 1) {\n            idx++;\n            result[idx] = [];\n        }\n    });\n    return result;\n}\nfunction compareDates(resDate, valueDate) {\n    if (!resDate || !valueDate)\n        return false;\n    const resultDate = new Date(resDate);\n    const dateVal = new Date(valueDate);\n    return resultDate.getFullYear() === dateVal.getFullYear() &&\n        resultDate.getMonth() === dateVal.getMonth() &&\n        resultDate.getDate() === dateVal.getDate();\n}\nfunction romanize(num) {\n    const lookup = {\n        M: 1000,\n        CM: 900,\n        D: 500,\n        CD: 400,\n        C: 100,\n        XC: 90,\n        L: 50,\n        XL: 40,\n        X: 10,\n        IX: 9,\n        V: 5,\n        IV: 4,\n        I: 1\n    };\n    let roman = \"\", i;\n    for (i in lookup) {\n        while (num >= lookup[i]) {\n            roman += i;\n            num -= lookup[i];\n        }\n    }\n    return roman;\n}\nfunction getTimeValues(duration) {\n    return {\n        seconds: parseInt(((duration / 1000) % 60)),\n        minutes: parseInt(((duration / (1000 * 60)) % 60)),\n        hours: parseInt(((duration / (1000 * 60 * 60)) % 24)),\n        days: parseInt((duration / (1000 * 60 * 60 * 24)))\n    };\n}\nfunction onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n}\nfunction uniqArray(arr) {\n    if (arr == null)\n        return arr;\n    return arr.filter(onlyUnique);\n}\nfunction isDateValid(date) {\n    return date && date.getTime && !isNaN(date.getTime());\n}\nfunction pad(n) {\n    return `${n < 10 ? \"0\" + n.toString() : n}`;\n}\nfunction toISO8601DateString(date) {\n    return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FrequencyRowTransformer = void 0;\nconst mdt_client_1 = require(\"mdt-client\");\nclass FrequencyRowTransformer {\n    constructor(routePageCtrl) {\n        this.routePageCtrl = routePageCtrl;\n    }\n    $view(ctrl, ctx) {\n        let id = ctx.row.$id;\n        if (!ctx.row.$id)\n            return;\n        let count = ctrl.routePageCtrl.routePointsManager.getPointsByOutlet(id)\n            .length;\n        if (!count)\n            mdt_client_1.legacy.ui.m.addClass(ctx.tr, \"route-row_incorrect_freq\");\n    }\n}\nexports.FrequencyRowTransformer = FrequencyRowTransformer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RouteManagementCtrl = void 0;\nconst RouteManager_1 = require(\"RouteManager\");\nconst mdt_client_1 = require(\"mdt-client\");\nconst RoutePointsManager_1 = require(\"./RoutePointsManager\");\nconst RouteRowCellTransformer_1 = require(\"./RouteRowCellTransformer\");\nconst FrequencyRowTransformer_1 = require(\"./FrequencyRowTransformer\");\nconst NotBoundRowTransformer_1 = require(\"./NotBoundRowTransformer\");\nconst NotActiveRowTransformer_1 = require(\"./NotActiveRowTransformer\");\nconst CopyRouteControl_1 = require(\"routesApproval/CopyRouteControl\");\nconst TotalTimeControl_1 = require(\"./TotalTimeControl\");\nconst RouteColumns_1 = require(\"./RouteColumns\");\nconst Formatters_1 = require(\"./Formatters\");\nconst utils_1 = require(\"utils/utils\");\nclass RouteManagementCtrl {\n    static namedFilter() {\n        return {\n            code: \"mapping\",\n            tooltip: mdt_client_1.Utils.getText(\"formControl:Filter\"),\n            filters: [\n                { title: mdt_client_1.Utils.getText(\"All outlets\"), selected: true, filter: mdt_client_1.Filter.ne(\"ID_Cycle\", null) },\n                { title: mdt_client_1.Utils.getText(\"Outlets in the route\"), filter: mdt_client_1.Filter.eq(\"FlagOutletInRoute\", true) },\n                {\n                    title: mdt_client_1.Utils.getText(\"Outlets in the route with observed frequency\"),\n                    filter: mdt_client_1.Filter.and(mdt_client_1.Filter.eq(\"FlagOutletInRoute\", true), mdt_client_1.Filter.eq(\"FlagObservedFrequency\", true))\n                },\n                {\n                    title: mdt_client_1.Utils.getText(\"Outlets in the route without observed frequency\"),\n                    filter: mdt_client_1.Filter.and(mdt_client_1.Filter.eq(\"FlagOutletInRoute\", true), mdt_client_1.Filter.eq(\"FlagObservedFrequency\", false))\n                },\n                { title: mdt_client_1.Utils.getText(\"Outlets not in the route\"), filter: mdt_client_1.Filter.eq(\"FlagOutletInRoute\", false) }\n            ]\n        };\n    }\n    constructor(options) {\n        this.options = options;\n        //model\n        this.positionIdProp = mdt_client_1.legacy.utils.prop();\n        this.cycleIdProp = mdt_client_1.legacy.utils.prop();\n        this.routeTimeTransfer = mdt_client_1.legacy.utils.prop();\n        this.outletData = [];\n        this.currentWeek = null;\n        this.currentDay = null;\n        this.selected = {\n            days: [],\n            weeks: []\n        };\n        this.initContainer = (container) => {\n            container.cssClasses = \"route-management-page\";\n            let routeTable = mdt_client_1.legacy.SchemaManagerInstance.get(RouteManager_1.RouteManager.SCHEMA.route.code);\n            let cycleCode = \"Cycle\";\n            let positionCode = \"Position\";\n            let timeCode = \"Time\";\n            let saveRouteTimeout;\n            let headerControls = new mdt_client_1.legacy.PageHeaderControls({\n                controlsSettings: [\n                    {\n                        code: cycleCode,\n                        prop: this.cycleIdProp,\n                        field: Object.assign(Object.assign({}, mdt_client_1.legacy.SchemaManagerInstance.field(routeTable, RouteManager_1.RouteManager.SCHEMA.route.fields.idCycle)), { code: RouteManager_1.RouteManager.SCHEMA.route.fields.idCycle, nullable: true }),\n                        options: Object.assign({ hintSelect: [\"DateBegin\", \"DateEnd\"], css: \"routes-cycle-picker\" }, this.options.cyclePicker)\n                    },\n                    {\n                        code: positionCode,\n                        prop: this.positionIdProp,\n                        field: Object.assign(Object.assign({}, mdt_client_1.legacy.SchemaManagerInstance.field(routeTable, RouteManager_1.RouteManager.SCHEMA.route.fields.idPosition)), { code: RouteManager_1.RouteManager.SCHEMA.route.fields.idPosition, nullable: true }),\n                        options: Object.assign({ css: \"routes-position-picker\" }, this.options.positionPicker)\n                    },\n                    {\n                        code: timeCode,\n                        prop: this.routeTimeTransfer,\n                        field: Object.assign(Object.assign({}, mdt_client_1.legacy.SchemaManagerInstance.field(routeTable, RouteManager_1.RouteManager.SCHEMA.route.fields.timeTransfer)), { code: \"Time\", nullable: true }),\n                        options: {\n                            visible: () => !!this.route,\n                            enabled: () => this.route && !this.isReadonly(),\n                            placeholder: RouteManager_1.RouteManager.Settings.TimeTransfer,\n                            customText: () => this.routeTimeTransfer(),\n                            css: \"routes-time-transfer\"\n                        }\n                    }\n                ]\n            }, {\n                onchange: (code, v, record, r, data = {}) => {\n                    let { $fetchDisplayValue, $autopick } = data;\n                    if (code == cycleCode) {\n                        if (record && record.$fake) {\n                            record = null;\n                            this.cycleIdProp(null);\n                        }\n                        this.setCycle(record, $fetchDisplayValue, $autopick);\n                    }\n                    else if (code == positionCode) {\n                        if (record && record.$fake) {\n                            record = null;\n                            this.positionIdProp(null);\n                        }\n                        this.setPosition(record, $fetchDisplayValue, $autopick);\n                    }\n                    else if (code == timeCode) {\n                        clearTimeout(saveRouteTimeout);\n                        saveRouteTimeout = setTimeout(() => {\n                            if (v < 0 || isNaN(v)) {\n                                mdt_client_1.Ui.showModal(mdt_client_1.Utils.getText(\"Invalid value. Time must be a number greater than or equal to zero\"), {\n                                    type: \"warning\",\n                                    title: \"Error\"\n                                });\n                                return;\n                            }\n                            this.routeManager\n                                .saveRoute({\n                                ID: this.route.ID,\n                                TimeTransfer: v !== null && v !== void 0 ? v : RouteManager_1.RouteManager.Settings.TimeTransfer\n                            })\n                                .then(() => {\n                                this.route.TimeTransfer = v;\n                                mdt_client_1.legacy.ui.show.success(\"Route time transfer updated!\", \"\");\n                            });\n                        }, RouteManager_1.RouteManager.Settings.TimeTransferUpdateDelay);\n                    }\n                }\n            });\n            container.zones.header.push(headerControls);\n            container.zones.header.push(new TotalTimeControl_1.TotalTimeControl(this));\n        };\n        options.cyclePicker.picked = () => this.updateRouteTable();\n        this.updateContent(true);\n        this.routeManager = new RouteManager_1.RouteManager();\n        this.routeManager.fetchCyclePeriods().then((periods) => (this.cyclePeriods = periods.records));\n        // Parse URL Params\n        let { cycleId, positionId } = RouteManager_1.RouteManager.getUrlParams();\n        this.cycleIdProp(cycleId);\n        this.positionIdProp(positionId);\n    }\n    updateRouteTable() {\n        this.selected.weeks = [];\n        this.selected.days = [];\n        if (this.route)\n            this.refreshRoutePoints(this.route.ID);\n    }\n    setPosition(position, $initial, $autopick) {\n        this.position = position;\n        this.updateContent($initial, $autopick);\n    }\n    setCycle(cycle, $initial, $autopick) {\n        this.cycle = cycle;\n        this.currentWeek = null;\n        this.currentDay = null;\n        this.weeksData =\n            this.cycle && this.cycle.DateBegin && this.cycle.DateEnd\n                ? (0, utils_1.getWeeksData)(this.cycle.DateBegin, this.cycle.DateEnd)\n                : null;\n        this.updateContent($initial, $autopick);\n    }\n    setWeekIndex(v) {\n        this.currentWeek = v;\n        this.currentDay = null;\n        this.list.relayout();\n    }\n    setDay(date, resetSorting) {\n        this.currentDay = date;\n        resetSorting && this.list.paging && this.list.paging.sorting && this.list.paging.sorting.clear();\n        this.list.relayout();\n    }\n    updateRouteState(replace) {\n        let args = {};\n        if (this.cycle)\n            args[RouteManager_1.RouteManager.Settings.RouteURLParams.Cycle] = this.cycle.ID;\n        if (this.position)\n            args[RouteManager_1.RouteManager.Settings.RouteURLParams.Position] = this.position.ID;\n        RouteManager_1.RouteManager.setUrlParams(args, replace);\n    }\n    updateContent($initial, $autopick) {\n        if (!$initial && !$autopick)\n            this.updateRouteState($autopick);\n        if (!this.position || !this.cycle) {\n            this.content = mdt_client_1.legacy.CenteredMessageCtrl(`${mdt_client_1.Utils.getText(\"Please select cycle and position\")}!`);\n            return;\n        }\n        this.content = mdt_client_1.legacy.CenteredMessageCtrl(`${mdt_client_1.Utils.getText(\"Loading...\")}`);\n        this.routeManager.loadRouteData(this.cycle, this.position.ID).then((route) => {\n            this.route = route;\n            this.routeTimeTransfer(this.route.TimeTransfer);\n            this.refreshRoutePoints(this.route.ID).then(() => {\n                this.initList();\n            });\n        });\n    }\n    refreshRoutePoints(ID_Route) {\n        return this.routeManager.getRoutePoints(ID_Route).then((r) => {\n            this.routePointsManager = new RoutePointsManager_1.RoutePointsManager(r, ID_Route);\n            return r;\n        });\n    }\n    initList() {\n        let outletTable = mdt_client_1.Schema.getObject(RouteManager_1.RouteManager.SCHEMA.outlet.code);\n        let routeTable = mdt_client_1.legacy.SchemaManagerInstance.get(RouteManager_1.RouteManager.SCHEMA.route.code);\n        let defauldField = outletTable.getDefaultField();\n        let s = RouteManager_1.RouteManager.SCHEMA;\n        this.list = mdt_client_1.legacy.components.simpleList(mdt_client_1.legacy.SchemaManagerInstance.get(RouteManager_1.RouteManager.SCHEMA.outlet.code), mdt_client_1.legacy.utils.combine({\n            root: true,\n            events: {\n                inited: [(list) => this.initColumns(list)],\n                query: [\n                    (query) => {\n                        query.select = (0, utils_1.uniqArray)(query.select.concat(\"FlagNotBound\", \"Frequency\", \"FlagNotActive\"));\n                    }\n                ],\n                fetched: [\n                    (x, query) => {\n                        if (query.skip == 0) {\n                            this.outletData = [];\n                        }\n                        if (!x.records.length)\n                            return;\n                        x.records.forEach((x) => {\n                            x.ID = x.ID_Outlet;\n                            x.$id = x.ID;\n                        });\n                        this.outletData = this.outletData.concat(x.records);\n                    }\n                ]\n            },\n            transformers: {\n                cell: [new RouteRowCellTransformer_1.RouteRowCellTransformer(this)],\n                row: [\n                    new FrequencyRowTransformer_1.FrequencyRowTransformer(this),\n                    new NotBoundRowTransformer_1.NotBoundRowTransformer(this),\n                    new NotActiveRowTransformer_1.NotActiveRowTransformer(this)\n                ]\n            },\n            disableRowCache: true,\n            layout: {\n                id: 1,\n                columns: this.options.listColumns\n                    ? this.options.listColumns\n                    : [\n                        {\n                            title: outletTable.getTitle(),\n                            code: defauldField.getCode()\n                        }\n                    ]\n            },\n            datasource: {\n                fetch: (query, table) => {\n                    const queryWithParams = this.setQueryParams(query);\n                    return mdt_client_1.Api.fetchFunction(table.code, queryWithParams.params, queryWithParams);\n                }\n            }\n        }, this.options.listOptions), mdt_client_1.legacy.utils.combine({\n            toolbar: {\n                buttons: [\n                    new mdt_client_1.legacy.modules.status.StatusButton(routeTable, this.route, {\n                        onStatusChange: () => {\n                            this.routeManager.getRoute(this.cycle.ID, this.position.ID).then((x) => {\n                                this.route = x;\n                            });\n                        }\n                    }),\n                    {\n                        wrapClass: \"toolbar-flex-content\",\n                        control: this.weeksSwitch(),\n                        visible: () => this.isWeekSwitchVisible()\n                    },\n                    {\n                        wrapClass: \"toolbar-flex-content\",\n                        control: this.daysSwitch(),\n                        visible: () => this.isDaysSwitchVisible()\n                    },\n                    {\n                        title: \"routes:Copy\",\n                        icon: \"copy\",\n                        enabled: () => this.isEnabledCopyButton(),\n                        order: mdt_client_1.legacy.list.ToolbarCtrl.ORDER.LATEST + 100,\n                        command: () => {\n                            let copyRouteControl = new CopyRouteControl_1.CopyRouteControl(this.cycle.ID, [this.position.ID], { [this.position.ID]: this.route }, this.selected.days.length\n                                ? this.selected.days.map((x) => {\n                                    return {\n                                        From: {\n                                            date: x.date,\n                                            dateIndexInCycle: x.dateIndex,\n                                            cycleWeekIndex: x.weekIndex\n                                        },\n                                        To: {}\n                                    };\n                                })\n                                : this.selected.weeks.map((x) => {\n                                    return {\n                                        From: {\n                                            week: x.weekData,\n                                            cycleWeekIndex: x.weekIndex\n                                        },\n                                        To: {}\n                                    };\n                                }), () => this.updateRouteTable(), this.cyclePeriods);\n                            mdt_client_1.Ui.showModal(copyRouteControl, {\n                                onClose: () => this.list.refresh()\n                            });\n                        }\n                    },\n                    {\n                        title: \"Clear\",\n                        icon: \"eraser\",\n                        enabled: () => this.isEnabledClearButton(),\n                        order: mdt_client_1.legacy.list.ToolbarCtrl.ORDER.LATEST + 100,\n                        command: () => {\n                            const routesForClear = this.getActiveSelectedRoutes();\n                            mdt_client_1.legacy.confirmModal(`Вы действительно хотите очистить записи в выбранных колонках? Это отменит маршрут на выбранные дни.`, mdt_client_1.Utils.getText(\"serverMessageType:Confirmation\"), (btn) => {\n                                btn.command = () => this.routePointsManager.deleteRecords(routesForClear);\n                                btn.title = \"Clear\";\n                                btn.icon = \"eraser\";\n                                return btn;\n                            });\n                        }\n                    }\n                ]\n            },\n            inMemoryNamedFilter: { groups: [RouteManagementCtrl.namedFilter()] },\n            legend: {\n                items: [\n                    {\n                        title: mdt_client_1.Utils.getText(\"No visits\"),\n                        cssClass: \"route-row_incorrect_freq\"\n                    },\n                    {\n                        title: mdt_client_1.Utils.getText(\"Outlet not bound\"),\n                        cssClass: \"route-row_is-not-bound\"\n                    },\n                    {\n                        title: mdt_client_1.Utils.getText(\"Outlet is not active\"),\n                        cssClass: \"route-row_is-not-active\"\n                    }\n                ]\n            },\n            designer: false,\n            export: {\n                prepareQuery: (query) => {\n                    return this.setQueryParams(query);\n                }\n            }\n        }, this.options.extConfig));\n        this.content = this.list;\n    }\n    setQueryParams(query) {\n        const currentDay = query.sorting.length > 0 ? null : this.currentDay;\n        query.params = {\n            ID_Cycle: this.cycle.ID,\n            ID_em_Position: this.position.ID,\n            Date: currentDay\n        };\n        return query;\n    }\n    initColumns(list) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        list.columns().push(...this.createWeekColumns());\n        if ((_b = (_a = this.options.timeColumn) === null || _a === void 0 ? void 0 : _a.visible) !== null && _b !== void 0 ? _b : true) {\n            list.columns().splice((_d = (_c = this.options.timeColumn) === null || _c === void 0 ? void 0 : _c.position) !== null && _d !== void 0 ? _d : Number.MAX_VALUE, 0, (0, RouteColumns_1.createTimeColumn)(this));\n        }\n        if ((_f = (_e = this.options.frequencyColumn) === null || _e === void 0 ? void 0 : _e.visible) !== null && _f !== void 0 ? _f : true) {\n            list.columns().splice((_h = (_g = this.options.frequencyColumn) === null || _g === void 0 ? void 0 : _g.position) !== null && _h !== void 0 ? _h : Number.MAX_VALUE, 0, {\n                title: mdt_client_1.Utils.getText(\"Frequency\"),\n                $routeColumnType: RouteColumns_1.SFRouteColumnType.frequency,\n                control: new mdt_client_1.legacy.list.CustomColumnCtrl({\n                    value: (ctx) => {\n                        let id = ctx.row.ID;\n                        if (!id)\n                            return;\n                        let count = this.routePointsManager.getPointsByOutlet(id).length;\n                        let idOutletCode = RouteManager_1.RouteManager.SCHEMA.outletData.fields.idOutlet;\n                        let x = this.outletData.find((d) => d[idOutletCode] == id);\n                        let freq = x && x.Frequency;\n                        return (0, mdt_client_1.m)(`${count != freq ? \".text-danger\" : \"\"}`, `${count}/${freq}`);\n                    }\n                })\n            });\n        }\n    }\n    createWeekColumns() {\n        let listColumns = [];\n        if (!this.weeksData)\n            return listColumns;\n        if (this.currentWeek == null) {\n            listColumns = listColumns.concat(this.weeksData.map((weekData, idx) => {\n                return (0, RouteColumns_1.createWeekColumn)(idx, weekData, this);\n            }));\n        }\n        else if (this.currentWeek != null && this.currentDay == null) {\n            listColumns = listColumns.concat(this.getCurrentWeekData().map((date) => {\n                return (0, RouteColumns_1.createDayColumn)(date, this.getDateIndex(date), this.getWeekIndex(date), this);\n            }));\n        }\n        else if (this.currentWeek != null && this.currentDay != null) {\n            let date = this.getCurrentDay();\n            listColumns.push((0, RouteColumns_1.createDayColumn)(date, this.getDateIndex(date), this.getWeekIndex(date), this));\n            listColumns.push((0, RouteColumns_1.createTimeVisitColumn)(this));\n        }\n        return listColumns;\n    }\n    getVisitTime(routePoint) {\n        return routePoint.TimeVisit || this.route.TimeVisit || RouteManager_1.RouteManager.Settings.TimeVisit;\n    }\n    isWeekSwitchVisible() {\n        return !!this.weeksData;\n    }\n    weeksSwitch() {\n        return new mdt_client_1.legacy.list.SwitchButtons({\n            label: `${mdt_client_1.Utils.getText(\"Week\")}:`,\n            items: () => {\n                return this.weeksData\n                    .map((weeksData, idx) => {\n                    return {\n                        key: idx,\n                        title: (0, Formatters_1.formatWeekTitle)(idx),\n                        description: (0, Formatters_1.formatWeekDates)(weeksData),\n                        selected: this.currentWeek == idx\n                    };\n                })\n                    .concat({\n                    key: null,\n                    title: `${mdt_client_1.Utils.getText(\"All\")}`,\n                    selected: this.currentWeek == null\n                });\n            },\n            onSelect: (item) => {\n                this.setWeekIndex(item.key);\n            }\n        });\n    }\n    isDaysSwitchVisible() {\n        return !!this.weeksData && this.currentWeek != null;\n    }\n    daysSwitch() {\n        return new mdt_client_1.legacy.list.SwitchButtons({\n            label: `${mdt_client_1.Utils.getText(\"Day\")}:`,\n            items: () => {\n                return this.getCurrentWeekData()\n                    .map((date) => {\n                    let attrs = {};\n                    let isWorkday = this.routeManager.isWorkday(date);\n                    if (!isWorkday)\n                        attrs.title = mdt_client_1.Utils.getText(\"Holiday\");\n                    return {\n                        key: date.getTime(),\n                        $data: date,\n                        title: mdt_client_1.Utils.getText(utils_1.shortDayNames[date.getDay()]),\n                        description: (0, Formatters_1.formatDay)(date),\n                        selected: (0, utils_1.compareDates)(this.currentDay, date),\n                        cssClass: isWorkday ? null : \"text-danger\",\n                        attrs\n                    };\n                })\n                    .concat({\n                    key: null,\n                    title: `${mdt_client_1.Utils.getText(\"All\")}`,\n                    selected: this.currentDay == null\n                });\n            },\n            onSelect: (item) => {\n                this.setDay(item.$data);\n            }\n        });\n    }\n    getCurrentWeekData() {\n        return this.currentWeek == null ? null : this.weeksData[this.currentWeek];\n    }\n    getCurrentDay() {\n        return this.currentWeek != null && this.currentDay != null\n            ? this.getCurrentWeekData().find((date) => (0, utils_1.compareDates)(date, this.currentDay))\n            : null;\n    }\n    isReadonly() {\n        return this.route ? this.routeManager.isReadonly(this.route) : true;\n    }\n    selectWeek(weekData, index) {\n        this.selected.days = [];\n        this.isWeekSelected(index)\n            ? this.selected.weeks = this.selected.weeks.filter(({ weekIndex }) => weekIndex !== index)\n            : this.selected.weeks.push({ weekData: weekData, weekIndex: index });\n    }\n    selectDay(date, weekIndex, dateIndex) {\n        this.selected.weeks = [];\n        this.isDaySelected(date)\n            ? this.selected.days = this.selected.days.filter(({ date: selectedDate }) => selectedDate !== date)\n            : this.selected.days.push({ date, weekIndex: weekIndex, dateIndex });\n    }\n    isWeekSelected(index) {\n        return this.selected.weeks.find((x) => x.weekIndex === index) && true;\n    }\n    isDaySelected(date) {\n        return this.selected.days.find((x) => x.date === date) && true;\n    }\n    isEnabledCopyButton() {\n        return this.selected.days.length || this.selected.weeks.length;\n    }\n    isEnabledClearButton() {\n        return this.getActiveSelectedRoutes().length != 0 && !this.isReadonly();\n    }\n    getActiveSelectedRoutes() {\n        const routesForClear = [];\n        if (this.selected.days.length) {\n            this.selected.days.map((day) => {\n                routesForClear.push(...this.routePointsManager.getPoints(day.date, true));\n            });\n        }\n        else {\n            this.selected.weeks.map((week) => {\n                week.weekData.forEach((day) => {\n                    routesForClear.push(...this.routePointsManager.getPoints(day, true));\n                });\n            });\n        }\n        return routesForClear;\n    }\n    getWeekIndex(date) {\n        return this.weeksData.findIndex((x) => x.includes(date));\n    }\n    getDateIndex(date) {\n        var timeDiff = Math.abs(date.getTime() - this.cycle.DateBegin.getTime());\n        var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n        return diffDays;\n    }\n    isNotBound(ID_Outlet) {\n        var outlet = this.outletData.find((r) => r.ID_Outlet == ID_Outlet);\n        return outlet && outlet.FlagNotBound;\n    }\n    isNotActive(ID_Outlet) {\n        var outlet = this.outletData.find((r) => r.ID_Outlet == ID_Outlet);\n        return outlet && outlet.FlagNotActive;\n    }\n}\nexports.RouteManagementCtrl = RouteManagementCtrl;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RouteApprovalPage = void 0;\nconst mdt_client_1 = require(\"mdt-client\");\nconst RouteApprovalCtrl_1 = require(\"./RouteApprovalCtrl\");\nclass RouteApprovalPage extends RouteApprovalCtrl_1.RouteApprovalCtrl {\n    constructor(node) {\n        let options = {};\n        if (node.controlTemplate) {\n            try {\n                options = JSON.parse(node.controlTemplate);\n            }\n            catch (e) {\n                console.error(\"Can't parse node control template!\", e);\n            }\n        }\n        options.cyclePicker = Object.assign({ autopick: {\n                sorting: [{ path: \"DateBegin\", asc: true }],\n                filter: mdt_client_1.Filter.ge(\"DateBegin\", new Date())\n            }, searchOperation: \"contains\" }, options.cyclePicker);\n        options.positionPicker = Object.assign({ autopick: {\n                sorting: [{ path: \"ID\", asc: false }],\n                filter: {\n                    op: \"eq\",\n                    p1: \"EmployeeHistory/ID_Employee/ID_mdt_Principal\",\n                    p2: \"ID_CURRENT_USER\"\n                }\n            }, searchOperation: \"contains\" }, options.positionPicker);\n        super(options);\n    }\n}\nexports.RouteApprovalPage = RouteApprovalPage;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RouteWeekColumnTemplates = exports.RouteWeekColumn = void 0;\nconst mdt_client_1 = require(\"mdt-client\");\nclass RouteWeekColumn {\n    constructor(options) {\n        this.options = options;\n    }\n}\nexports.RouteWeekColumn = RouteWeekColumn;\nconst iconCheck = () => (0, mdt_client_1.m)(\"span.route-col_icon-check\", mdt_client_1.legacy.ui.el.icon(\"check\"));\nexports.RouteWeekColumnTemplates = {\n    one: () => (0, mdt_client_1.m)(\".route-col_val-one\", iconCheck()),\n    many: (title) => (0, mdt_client_1.m)(`.route-col_val-many[title=\"${title}\"]`, iconCheck(), iconCheck()),\n    flag: () => (0, mdt_client_1.m)(\".route-col_val-flag\", mdt_client_1.legacy.ui.el.icon(\"flag\")),\n    day: (num) => (0, mdt_client_1.m)(\"\", iconCheck(), (0, mdt_client_1.m)(\"span.route-col_val-num\", `${num}`))\n};\nmdt_client_1.legacy.viewer(RouteWeekColumn, (ctrl, ctx) => {\n    if (ctx.isHead) {\n        mdt_client_1.legacy.ui.m.addClass(ctx.th, \"route-col_header-link\");\n        return [\n            (0, mdt_client_1.m)(\"span\", {\n                onclick: () => ctrl.options.onHeadClick && ctrl.options.onHeadClick(ctx)\n            }, ctx.headerText),\n            (0, mdt_client_1.m)(\"input[type=checkbox]\", {\n                onclick: (e) => {\n                    ctrl.options.onHeadCheckboxClick(ctx);\n                    e.stopPropagation();\n                },\n                checked: ctrl.options.isHeadCheckboxChecked()\n            })\n        ];\n    }\n    mdt_client_1.legacy.ui.m.addClass(ctx.td, \"route-col_cell\");\n    return (0, mdt_client_1.m)(\".route-col_wrap\", {\n        onclick: () => ctrl.options.active && ctrl.options.active() ? ctrl.options.onclick && ctrl.options.onclick(ctx) : mdt_client_1.legacy.utils.noop()\n    }, ctrl.options.value(ctx));\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RoutePointsManager = void 0;\nconst RouteManager_1 = require(\"RouteManager\");\nconst mdt_client_1 = require(\"mdt-client\");\nconst utils_1 = require(\"utils/utils\");\nclass RoutePointsManager {\n    constructor(original, ID_Route) {\n        this.original = original;\n        this.ID_Route = ID_Route;\n        this.routeManager = new RouteManager_1.RouteManager();\n        this.state = {\n            pending: mdt_client_1.legacy.utils.prop(false)\n        };\n        this.init();\n        this.rm = mdt_client_1.legacy.RecordManagerInstance;\n    }\n    init() {\n        this.data = mdt_client_1.legacy.utils.clone(this.original);\n    }\n    toggle(outletData, date) {\n        let ID_Outlet = outletData.ID_Outlet;\n        let rec = this.data.find((r) => r.ID_Outlet == ID_Outlet && (0, utils_1.compareDates)(r.Date, date) && !this.rm.isDestroyed(r));\n        if (rec) {\n            this.delete(rec);\n        }\n        else {\n            this.addAvailable(outletData) && this.add(ID_Outlet, date);\n        }\n    }\n    addAvailable(outletData) {\n        return !outletData.FlagNotBound;\n    }\n    add(ID_Outlet, date) {\n        let curRecs = this.getOrderedPoints(date);\n        let f = RouteManager_1.RouteManager.SCHEMA.routePoint.fields;\n        let newRecord = this.rm.newRecord({\n            [f.idOutlet]: ID_Outlet,\n            [f.date]: date,\n            [f.idRoute]: this.ID_Route,\n            [f.sortOrder]: curRecs.length ? curRecs[curRecs.length - 1].SortOrder + 1 : 1,\n            $table: mdt_client_1.legacy.SchemaManagerInstance.get(RouteManager_1.RouteManager.SCHEMA.routePoint.code)\n        });\n        this.data.push(newRecord);\n        this.state.pending(true);\n        this.routeManager.saveRoutePoints(this.getOrderedPoints(date)).then((x) => {\n            this.state.pending(false);\n            let id = mdt_client_1.legacy.ServerMessageHelper.getInsertedId(x);\n            newRecord.$id = newRecord.ID = id;\n        });\n    }\n    delete(record) {\n        this.deleteRecords([record]);\n    }\n    deleteRecords(records = []) {\n        if (records.length == 0)\n            return;\n        const updatedRecords = [];\n        records.forEach((route) => {\n            this.rm.destroy(route);\n            this.getOrderedPoints(route.Date).forEach((r, idx) => {\n                r.SortOrder = idx + 1;\n                if (!records.includes(r)) {\n                    updatedRecords.push(r);\n                }\n            });\n        });\n        const meta = {\n            messageAction: {\n                actions: [{\n                        code: \"DmFlagConfirm\",\n                        value: \"true\"\n                    }]\n            }\n        };\n        this.state.pending(true);\n        this.routeManager.saveRoutePoints([...records, ...updatedRecords], meta).then(() => {\n            this.data = this.data.filter(item => !records.includes(item));\n            this.state.pending(false);\n        });\n    }\n    getData(activeOnly = true) {\n        return activeOnly ? this.data.filter((r) => !this.rm.isDestroyed(r)) : this.data;\n    }\n    getPoint(ID_Outlet, date) {\n        return this.getData().find((r) => {\n            return r.ID_Outlet == ID_Outlet && (0, utils_1.compareDates)(r.Date, date);\n        });\n    }\n    getPoints(date, activeOnly) {\n        return this.getData(activeOnly).filter((r) => (0, utils_1.compareDates)(r.Date, date));\n    }\n    getPointsByOutlet(ID_Outlet) {\n        return this.getData().filter((r) => r.ID_Outlet == ID_Outlet);\n    }\n    getOrderedPoints(date) {\n        return this.getPoints(date).sort(this.rm.sort);\n    }\n    getTimeTransfer(route) {\n        return route.TimeTransfer || 0;\n    }\n    getTimeVisit(routePoint, route) {\n        return routePoint.TimeVisit || route.TimeVisit || 0;\n    }\n    getTotalTime(route, date) {\n        let points = this.getPoints(date) || [];\n        let timeTransfer = points.length ? (points.length - 1) * this.getTimeTransfer(route) : 0;\n        let timeVisit = points.reduce((acc, r) => acc + this.getTimeVisit(r, route), 0);\n        return {\n            timeAll: timeVisit + timeTransfer,\n            timeTransfer,\n            timeVisit\n        };\n    }\n    getTotalTimeInPeriod(route, dateBegin, dateEnd) {\n        let result = {\n            timeAll: 0,\n            timeTransfer: 0,\n            timeVisit: 0\n        };\n        (0, utils_1.getDaysArray)(dateBegin, dateEnd).forEach((date) => {\n            let x = this.getTotalTime(route, date);\n            result.timeAll += x.timeAll;\n            result.timeTransfer += x.timeTransfer;\n            result.timeVisit += x.timeVisit;\n        });\n        return result;\n    }\n}\nexports.RoutePointsManager = RoutePointsManager;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.registerModule = exports.legacy = exports.modules = exports.App = exports.Schema = exports.UiComponents = exports.ModuleRegistry = exports.RecordManager = exports.CommandManager = exports.Page = exports.Auth = exports.Filter = exports.m = exports.Api = exports.Ui = exports.Utils = exports.mUtils = exports.FieldControl = exports.ControlManager = exports.Form = exports.FormService = exports.List = exports.ListService = exports.SecurityManager = exports.Navigation = exports.MDT = void 0;\nvar package_json_1 = __importDefault(require(\"../package.json\"));\nexports.MDT = window.MDT;\nexports.Navigation = exports.MDT.Navigation, exports.SecurityManager = exports.MDT.SecurityManager, exports.ListService = exports.MDT.ListService, exports.List = exports.MDT.List, exports.FormService = exports.MDT.FormService, exports.Form = exports.MDT.Form, exports.ControlManager = exports.MDT.ControlManager, exports.FieldControl = exports.MDT.FieldControl, exports.mUtils = exports.MDT.mUtils, exports.Utils = exports.MDT.Utils, exports.Ui = exports.MDT.Ui, exports.Api = exports.MDT.Api, exports.m = exports.MDT.m, exports.Filter = exports.MDT.Filter, exports.Auth = exports.MDT.Auth, exports.Page = exports.MDT.Page, exports.CommandManager = exports.MDT.CommandManager, exports.RecordManager = exports.MDT.RecordManager, exports.ModuleRegistry = exports.MDT.ModuleRegistry, exports.UiComponents = exports.MDT.UiComponents, exports.Schema = exports.MDT.Schema, exports.App = exports.MDT.App, exports.modules = exports.MDT.modules, exports.legacy = exports.MDT.legacy;\nfunction registerModule(callback, context) {\n    exports.MDT.registerModule(callback, {\n        version: package_json_1.default.version,\n        name: context === null || context === void 0 ? void 0 : context.name\n    });\n}\nexports.registerModule = registerModule;\n//# sourceMappingURL=index.js.map","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RouteManager = void 0;\nconst mdt_client_1 = require(\"mdt-client\");\nconst utils_1 = require(\"utils/utils\");\nclass RouteManager {\n    constructor() {\n        this.holydays = [];\n    }\n    loadRouteData(cycle, ID_Position) {\n        return mdt_client_1.m.sync([\n            this.getRoute(cycle.ID, ID_Position),\n            this.fetchStatuses(),\n            this.fetchHolydays(cycle.DateBegin, cycle.DateEnd)\n        ])\n            .then(([route]) => route);\n    }\n    fetchCyclePeriods() {\n        const date = new Date();\n        date.setFullYear(date.getFullYear() - 3);\n        return mdt_client_1.Api.fetch('rt.Week', {\n            filter: mdt_client_1.Filter.ge('DateBegin', date),\n            top: 500\n        });\n    }\n    getRoute(ID_Cycle, ID_Position) {\n        let deferred = mdt_client_1.m.deferred();\n        this.fetchRoute(ID_Cycle, ID_Position).then(rec => {\n            if (rec) {\n                deferred.resolve(rec);\n            }\n            else {\n                this.saveRoute({\n                    ID_Cycle,\n                    [RouteManager.SCHEMA.route.fields.idPosition]: ID_Position,\n                    TimeTransfer: RouteManager.Settings.TimeTransfer,\n                    TimeVisit: RouteManager.Settings.TimeVisit\n                }).then(() => {\n                    this.fetchRoute(ID_Cycle, ID_Position).then(x => {\n                        if (!x)\n                            throw new Error(`${mdt_client_1.Utils.getText(`Can't create route`)}!`);\n                        mdt_client_1.legacy.ui.show.info(mdt_client_1.Utils.getText(`${mdt_client_1.Utils.getText(`New route created`)}!`), \"\");\n                        deferred.resolve(x);\n                    });\n                });\n            }\n        });\n        return deferred.promise;\n    }\n    fetchRoute(ID_Cycle, ID_Position) {\n        return mdt_client_1.Api.fetch(RouteManager.SCHEMA.route.code, {\n            filter: mdt_client_1.Filter.and(mdt_client_1.Filter.eq(RouteManager.SCHEMA.route.fields.idPosition, ID_Position), mdt_client_1.Filter.eq(RouteManager.SCHEMA.route.fields.idCycle, ID_Cycle))\n        }).then(x => x && x.records && x.records[0]);\n    }\n    saveRoute(data) {\n        return mdt_client_1.legacy.ApiServiceInstance.save(Object.assign({ $table: data.$table || RouteManager.SCHEMA.route.code }, data));\n    }\n    copyRoutesDataSource(options) {\n        return mdt_client_1.legacy.ApiService.createCustomDatasource(RouteManager.SCHEMA.procedures.copy, options);\n    }\n    saveRoutePoints(data, meta) {\n        return mdt_client_1.legacy.ApiServiceInstance.save(data, {}, {}, null, meta);\n    }\n    saveRoutePoint(point) {\n        return mdt_client_1.legacy.ApiServiceInstance.save(point);\n    }\n    getRoutePoints(ID_Route) {\n        return this.fullFetch({\n            filter: mdt_client_1.Filter.eq(RouteManager.SCHEMA.routePoint.fields.idRoute, ID_Route)\n        }, RouteManager.SCHEMA.routePoint.code);\n    }\n    fullFetch(query, table) {\n        let d = mdt_client_1.m.deferred();\n        if (!query.top) {\n            query.top = 1000;\n        }\n        let top = query.top;\n        let result = [];\n        let run = () => mdt_client_1.Api.fetch(table, query).then(x => {\n            if (!x.records)\n                d.reject();\n            result = result.concat(x.records);\n            if (x.records && x.records.length == top) {\n                query.skip = (query.skip || 0) + top;\n                run();\n            }\n            else {\n                d.resolve(result);\n            }\n        });\n        run();\n        return d.promise;\n    }\n    fetchHolydays(DateBegin, DateEnd) {\n        let def = mdt_client_1.m.deferred();\n        mdt_client_1.Api.fetchFunction(\"calendar.GetHolidays\", {\n            \"DateBegin\": DateBegin,\n            \"DateEnd\": DateEnd,\n            \"CountryCode\": \"RU\"\n        }).then(x => {\n            if (x.records) {\n                this.holydays = x.records\n                    .map(x => (x.Date ? new Date(x.Date) : null))\n                    .filter(d => (0, utils_1.isDateValid)(d));\n            }\n            def.resolve();\n        });\n        return def.promise;\n    }\n    isWorkday(date) {\n        return !this.holydays.find(d => (0, utils_1.compareDates)(date, d));\n    }\n    async getRoutes(ID_Cycle, ID_Positions) {\n        let f = RouteManager.SCHEMA.route.fields;\n        let routeSchema = RouteManager.SCHEMA.route;\n        let select = [\"*\"];\n        let iconPath = mdt_client_1.legacy.list.LabelStyleHelper.getIconPath(routeSchema.code, routeSchema.fields.idStatus);\n        if (iconPath)\n            select.push(iconPath);\n        let labelStylePath = mdt_client_1.legacy.list.LabelStyleHelper.getLabelStylePath(routeSchema.code, routeSchema.fields.idStatus);\n        if (labelStylePath)\n            select.push(labelStylePath);\n        let routeTable = mdt_client_1.legacy.SchemaManagerInstance.get(routeSchema.code);\n        return routeTable.$datasource.fetch({\n            filter: mdt_client_1.Filter.and(mdt_client_1.Filter.eq(f.idCycle, ID_Cycle), mdt_client_1.Filter.in(f.idPosition, ID_Positions)),\n            select\n        }, routeTable, {\n            method: \"POST\"\n        });\n    }\n    fetchStatuses() {\n        let def = mdt_client_1.m.deferred();\n        let routeTable = mdt_client_1.Schema.getObject(RouteManager.SCHEMA.route.code);\n        if (!this.statuses) {\n            mdt_client_1.legacy.modules.status.StatusManager.fetchStatuses({\n                filter: mdt_client_1.Filter.eq(mdt_client_1.legacy.modules.status.statusSchema.table.fields.ID_Object, routeTable.getId())\n            }).then(x => {\n                this.statuses = {};\n                x.records.forEach(r => {\n                    this.statuses[r.$id] = r;\n                });\n                def.resolve(this.statuses);\n            });\n        }\n        else {\n            def.resolve(this.statuses);\n        }\n        return def.promise;\n    }\n    isReadonly(route) {\n        if (!route.$access)\n            return true;\n        return !(route.$access.BaseLevel & mdt_client_1.SecurityManager.PermissionLevel.Write);\n    }\n    fetchTotalTime(routeId, DateBegin, DateEnd) {\n        return mdt_client_1.Api.fetchFunction(\"rt.udf_RouteTime\", Object.assign({}, mdt_client_1.legacy.ApiUrlHelper.prepareQueryParams(routeId, DateBegin, DateEnd))).then(x => {\n            return x.records && x.records[0] ? x.records[0] : null;\n        });\n    }\n    static fetchSettings() {\n        return mdt_client_1.Api.fetch(\"mdt.GlobalVar\", {\n            filter: mdt_client_1.Filter.startsWith(\"Code\", \"ent.routes.\")\n        }).then(s => {\n            s.records.forEach(r => this.setSetting(r));\n        });\n    }\n    static setSetting(record) {\n        let code = record.Code.replace(\"ent.routes.\", \"\");\n        if (this.ignoredSettings.includes(code))\n            return;\n        try {\n            let value = JSON.parse(record.Value);\n            if (code == \"schema\") {\n                this.SCHEMA = mdt_client_1.legacy.utils.utilscombine(this.SCHEMA, value);\n            }\n            else {\n                this.Settings[code] = value;\n            }\n        }\n        catch (e) {\n            console.error(mdt_client_1.Utils.getText(`Invalid settings value for parameter \"{code}\" in \"mdt.GlobalVar\". {error}`, {\n                code,\n                error: e\n            }));\n        }\n    }\n    static getUrlParams() {\n        let paramCodes = RouteManager.Settings.RouteURLParams;\n        return {\n            cycleId: mdt_client_1.m.route.param(paramCodes.Cycle),\n            positionId: mdt_client_1.m.route.param(paramCodes.Position)\n        };\n    }\n    static setUrlParams(args, replace) {\n        let path = mdt_client_1.legacy.URLHelper.removeAllParams(location.href) + mdt_client_1.legacy.utils.getQueryString(args);\n        history.pushState(null, null, path);\n    }\n}\nexports.RouteManager = RouteManager;\nRouteManager.Settings = {\n    TimeTransfer: 30,\n    TimeVisit: 50,\n    ConfirmationListColIndex: 2,\n    DefaultColumnWidth: 100,\n    RouteApprovalDefaultFieldColumnWidth: 300,\n    RouteApprovalDefaultColumnWidth: 160,\n    TimeVisitUpdateDelay: 1000,\n    TimeTransferUpdateDelay: 1000,\n    RouteURLParams: {\n        Cycle: \"cycle\",\n        Position: \"position\"\n    }\n};\nRouteManager.SCHEMA = {\n    route: {\n        code: \"rt.Route\",\n        fields: {\n            id: \"ID\",\n            idCycle: \"ID_Cycle\",\n            idPosition: \"ID_em_Position\",\n            idStatus: \"ID_status_Status\",\n            timeVisit: \"TimeVisit\",\n            timeTransfer: \"TimeTransfer\"\n        }\n    },\n    routePoint: {\n        code: \"rt.RoutePoint\",\n        fields: {\n            idRoute: \"ID_Route\",\n            idOutlet: \"ID_Outlet\",\n            date: \"Date\",\n            sortOrder: \"SortOrder\"\n        }\n    },\n    outlet: {\n        code: \"rt.udf_RouteOutlets\",\n        fields: {\n            id: \"ID\"\n        }\n    },\n    outletData: {\n        fields: {\n            idOutlet: \"ID_Outlet\",\n            idPosition: \"ID_em_Position\",\n            idCycle: \"ID_Cycle\"\n        }\n    },\n    cycle: {\n        code: \"rt.Cycle\"\n    },\n    position: {\n        code: \"em.Position\",\n        defaultFieldCode: \"EmployeeHistory$\"\n    },\n    procedures: {\n        copy: \"rt.usp_CopyRoutes\"\n    }\n};\nRouteManager.ignoredSettings = [\"CacheUpdateTime\"];\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RouteRowCellTransformer = void 0;\nconst mdt_client_1 = require(\"mdt-client\");\nconst RouteColumns_1 = require(\"./RouteColumns\");\nclass RouteRowCellTransformer {\n    constructor(routePageCtrl) {\n        this.routePageCtrl = routePageCtrl;\n    }\n    $view(ctrl, ctx) {\n        if (ctx.col.$routeColumnType != null &&\n            [\n                RouteColumns_1.SFRouteColumnType.day,\n                RouteColumns_1.SFRouteColumnType.week,\n                RouteColumns_1.SFRouteColumnType.timeVisit\n            ].includes(ctx.col.$routeColumnType) &&\n            !ctrl.routePageCtrl.isReadonly())\n            return;\n        mdt_client_1.legacy.ui.m.addClass(ctx.td, \"inline-read-only\");\n    }\n}\nexports.RouteRowCellTransformer = RouteRowCellTransformer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CopyRouteManager = void 0;\nconst RouteManager_1 = require(\"RouteManager\");\nconst mdt_client_1 = require(\"mdt-client\");\nconst utils_1 = require(\"utils/utils\");\nclass CopyRouteManager {\n    constructor(cycleId, posIds, positionRouteHash, mapping) {\n        this.cycleId = cycleId;\n        this.positionRouteHash = positionRouteHash;\n        this.mapping = mapping;\n        this.prevRoutesHash = {};\n        const periodsTableCode = \"rt.CopyRoutesPeriod_virtual\";\n        const periodsTable = mdt_client_1.legacy.SchemaManagerInstance.prepare({\n            code: periodsTableCode,\n            fields: [\n                {\n                    code: \"From\",\n                    title: mdt_client_1.Utils.getText(\"From\"),\n                    type: \"date\",\n                    nullable: false\n                },\n                {\n                    code: \"To\",\n                    title: mdt_client_1.Utils.getText(\"To\"),\n                    type: \"date\",\n                    nullable: false\n                }\n            ]\n        });\n        mdt_client_1.legacy.SchemaManagerInstance.add(periodsTable);\n        this.periodsTable = periodsTable;\n        this.table = mdt_client_1.legacy.SchemaManagerInstance.prepare({\n            title: \"Copy into routes\",\n            code: CopyRouteManager.tableCode,\n            fields: [\n                {\n                    code: \"ID_CycleFrom\",\n                    title: mdt_client_1.Utils.getText(\"Cycle\"),\n                    type: \"int\",\n                    refTableCode: RouteManager_1.RouteManager.SCHEMA.cycle.code,\n                    nullable: false\n                },\n                {\n                    code: \"ID_CycleTo\",\n                    type: \"int\",\n                    refTableCode: RouteManager_1.RouteManager.SCHEMA.cycle.code,\n                    nullable: false\n                },\n                {\n                    code: \"ID_PositionsTemp\",\n                    title: mdt_client_1.Utils.getText(\"Positions\"),\n                    type: \"list\",\n                    refTableCode: RouteManager_1.RouteManager.SCHEMA.position.code,\n                    nullable: true\n                }\n            ]\n        });\n        this.record = mdt_client_1.legacy.utils.prop(mdt_client_1.legacy.FormCtrl.createRecord({\n            ID_CycleFrom: cycleId,\n            ID_CycleTo: null,\n            ID_PositionsTemp: posIds\n        }, this.table, true));\n    }\n    canOverride(positionId) {\n        if (!this.selectedCycle)\n            return false;\n        let curRoute = this.selectedCycle;\n        let routeTable = mdt_client_1.legacy.SchemaManagerInstance.get(RouteManager_1.RouteManager.SCHEMA.route.code);\n        return (!curRoute ||\n            !!mdt_client_1.legacy.SecurityManagerInstance.record(curRoute, routeTable, mdt_client_1.SecurityManager.PermissionLevel.Delete));\n    }\n    routeById(id) {\n        return this.positionRouteHash[id];\n    }\n    prepareRecord(rec) {\n        let nRec = Object.assign({}, rec);\n        nRec[\"ID_Positions\"] = rec[\"ID_PositionsTemp\"]\n            .filter(id => this.canOverride(id))\n            .join(\",\");\n        delete nRec[\"ID_PositionsTemp\"];\n        if (this.mapping) {\n            nRec.Mapping = {\n                Name: \"Mapping\",\n                Type: \"rt.DateMappingType\",\n                Rows: []\n            };\n            this.mapping.map(mappingItem => {\n                if (mappingItem.From.week) {\n                    mappingItem.From.week.map((date, idx) => {\n                        const datesArr = [date];\n                        const dateTo = mappingItem.To.week && mappingItem.To.week[idx];\n                        if (dateTo) {\n                            datesArr.push(dateTo);\n                            nRec.Mapping.Rows.push(datesArr);\n                        }\n                    });\n                }\n                else if (mappingItem.To.date)\n                    nRec.Mapping.Rows.push([(0, utils_1.toISO8601DateString)(mappingItem.From.date), (0, utils_1.toISO8601DateString)(mappingItem.To.date)]);\n            });\n        }\n        return nRec;\n    }\n    isCopyEnabled() {\n        if (this.mapping && this.isEmptyMapping())\n            return false;\n        return this.record()[\"ID_PositionsTemp\"].filter(id => this.canOverride(id)).length;\n    }\n    isEmptyMapping() {\n        return !this.mapping.some(x => x.To.week || x.To.date);\n    }\n    onCycleUpdate() {\n        return this.updatePrevCycleData();\n    }\n    updatePrevCycleData() {\n        let d = mdt_client_1.m.deferred();\n        let positions = this.record()[\"ID_PositionsTemp\"];\n        let fields = RouteManager_1.RouteManager.SCHEMA.route.fields;\n        let routeTable = mdt_client_1.legacy.SchemaManagerInstance.get(RouteManager_1.RouteManager.SCHEMA.route.code);\n        let ds = routeTable.$datasource;\n        this.prevRoutesHash = {};\n        let cycleId = this.record()[\"ID_CycleTo\"];\n        this.selectedCycle = cycleId;\n        if (cycleId) {\n            ds.fetch({\n                filter: mdt_client_1.Filter.and(mdt_client_1.Filter.eq(fields.idCycle, cycleId), mdt_client_1.Filter.in(fields.idPosition, positions))\n            }, routeTable).then(x => {\n                let routes = x.records;\n                positions.forEach(posId => {\n                    let route = routes.find(route => route[fields.idPosition] == posId);\n                    this.prevRoutesHash[posId] = route || null;\n                });\n                if (this.mapping)\n                    this.resetMapping();\n                d.resolve();\n            });\n        }\n        else {\n            d.resolve();\n        }\n        return d.promise;\n    }\n    setPeriodsMapping() {\n        let cycle = this.record()[\"ID_CycleTo$\"];\n        if (cycle && cycle.DateBegin && cycle.DateEnd) {\n            var weekData = (0, utils_1.getWeeksData)(cycle.DateBegin, cycle.DateEnd);\n            this.currentCycleWeeks = weekData.map((x, i) => {\n                return {\n                    week: x,\n                    cycleWeekIndex: i\n                };\n            });\n            this.mapping.forEach(x => {\n                x.To = {};\n                if (x.From.date) {\n                    var d = new Date(cycle.DateBegin);\n                    d.setDate(d.getDate() + x.From.dateIndexInCycle);\n                    if (d <= cycle.DateEnd)\n                        x.To.date = d;\n                }\n                else {\n                    x.To.week = weekData[x.From.cycleWeekIndex];\n                    if (x.To.week)\n                        x.To.cycleWeekIndex = x.From.cycleWeekIndex;\n                }\n            });\n        }\n    }\n    mappingRecords() {\n        return this.mapping;\n    }\n    matchControlsAvailable() {\n        return this.mapping && this.mapping.length;\n    }\n    matchControlsEditable() {\n        return this.record()[\"ID_CycleTo\"];\n    }\n    getCyclePeriod() {\n        let cycle = this.record()[\"ID_CycleTo$\"];\n        if (cycle && cycle.DateBegin && cycle.DateEnd)\n            return {\n                cycleBegin: cycle.DateBegin,\n                cycleEnd: cycle.DateEnd,\n                periodLikeArray: (0, utils_1.getWeeksData)(cycle.DateBegin, cycle.DateEnd)\n            };\n    }\n    resetMapping() {\n        this.setPeriodsMapping();\n    }\n    selectableWeekDates() {\n        return this.currentCycleWeeks || [];\n    }\n}\nexports.CopyRouteManager = CopyRouteManager;\nCopyRouteManager.tableCode = \"rt.CopyRoutes_virtual\";\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RouteApprovalCtrl = void 0;\nconst RouteManager_1 = require(\"RouteManager\");\nconst mdt_client_1 = require(\"mdt-client\");\nconst CopyRouteControl_1 = require(\"./CopyRouteControl\");\nclass RouteApprovalCtrl {\n    constructor(options) {\n        this.options = options;\n        this.positionIdProp = mdt_client_1.legacy.utils.prop();\n        this.cycleIdProp = mdt_client_1.legacy.utils.prop();\n        this.positionRouteHash = {};\n        this.statusCache = {};\n        this.routeManager = new RouteManager_1.RouteManager();\n        this.content = mdt_client_1.legacy.CenteredMessageCtrl(`${mdt_client_1.Utils.getText(\"Please select cycle and position\")}!`);\n        // Parse URL Params\n        let { cycleId, positionId } = RouteManager_1.RouteManager.getUrlParams();\n        this.cycleIdProp(cycleId);\n        this.positionIdProp(positionId);\n    }\n    initContainer(container) {\n        let routeTable = mdt_client_1.legacy.SchemaManagerInstance.get(RouteManager_1.RouteManager.SCHEMA.route.code);\n        let headerControls = new mdt_client_1.legacy.PageHeaderControls({\n            controlsSettings: [\n                {\n                    code: \"cycle\",\n                    prop: this.cycleIdProp,\n                    field: Object.assign(Object.assign({}, mdt_client_1.legacy.SchemaManagerInstance.field(routeTable, RouteManager_1.RouteManager.SCHEMA.route.fields.idCycle)), { code: RouteManager_1.RouteManager.SCHEMA.route.fields.idCycle, nullable: true }),\n                    options: Object.assign({ hintSelect: [\"DateBegin\", \"DateEnd\"], css: \"routes-cycle-picker\" }, this.options.cyclePicker)\n                },\n                {\n                    code: \"position\",\n                    prop: this.positionIdProp,\n                    field: Object.assign(Object.assign({}, mdt_client_1.legacy.SchemaManagerInstance.field(routeTable, RouteManager_1.RouteManager.SCHEMA.route.fields.idPosition)), { code: RouteManager_1.RouteManager.SCHEMA.route.fields.idPosition, nullable: true }),\n                    options: Object.assign({ css: \"routes-position-picker\" }, this.options.positionPicker)\n                }\n            ]\n        }, {\n            onchange: (code, v, v$, r, data = {}) => {\n                let { $fetchDisplayValue, $autopick } = data;\n                this.updateMainContent($fetchDisplayValue, $autopick);\n            }\n        });\n        this.data = headerControls.record;\n        container.zones.header.push(headerControls);\n    }\n    updateRouteState(replace) {\n        let args = {};\n        if (this.data.cycle())\n            args[RouteManager_1.RouteManager.Settings.RouteURLParams.Cycle] = this.data.cycle();\n        if (this.data.position())\n            args[RouteManager_1.RouteManager.Settings.RouteURLParams.Position] = this.data.position();\n        RouteManager_1.RouteManager.setUrlParams(args, replace);\n    }\n    updateMainContent($initial, $autopick) {\n        if (!$initial && !$autopick) {\n            this.updateRouteState($autopick);\n        }\n        if (this.data.cycle() && this.data.position()) {\n            this.positionRouteHash = {};\n            this.content = this.createList();\n        }\n        else {\n            this.content = mdt_client_1.legacy.CenteredMessageCtrl(`${mdt_client_1.Utils.getText(\"Please select cycle and position\")}!`);\n        }\n    }\n    getStatuses(route) {\n        let statusField = RouteManager_1.RouteManager.SCHEMA.route.fields.idStatus;\n        return new Promise(resolve => {\n            let cached = this.statusCache[route[statusField]];\n            if (cached) {\n                resolve(cached);\n                return;\n            }\n            let table = mdt_client_1.legacy.SchemaManagerInstance.get(RouteManager_1.RouteManager.SCHEMA.route.code);\n            mdt_client_1.legacy.modules.status.StatusManager.getAvailableStatuses(table, route.$id, route[statusField]).then(statuses => {\n                statuses = statuses.filter(s => s.$id != route[statusField]);\n                this.statusCache[route[statusField]] = statuses;\n                resolve(statuses);\n            });\n        });\n    }\n    getStatusButton() {\n        let statusField = RouteManager_1.RouteManager.SCHEMA.route.fields.idStatus;\n        return {\n            title: \"Set status\",\n            enabled: () => {\n                let routes = this.getRoutes(this.list.exts.select.rows());\n                if (!routes.length)\n                    return false;\n                let curStatus = routes[0][statusField];\n                return routes.every(r => r[statusField] == curStatus);\n            },\n            command: (b, e) => {\n                let routes = this.getRoutes(this.list.exts.select.rows());\n                let route = routes[0];\n                let dd = new mdt_client_1.legacy.DropdownMenuCtrl({});\n                mdt_client_1.legacy.ui.viewState(dd).target = mdt_client_1.legacy.ui.dom.closest(e.target, \"A\");\n                dd.show([{ title: \"Loading...\" }]);\n                this.getStatuses(route).then(statuses => {\n                    dd.close();\n                    dd.show(statuses.length\n                        ? statuses.map(r => (Object.assign(Object.assign({}, mdt_client_1.legacy.modules.status.StatusManager.createStatusButton(r)), { command: () => {\n                                mdt_client_1.legacy.modules.status.StatusManager.setStatus(routes, r.$id);\n                                this.list.exts.select.clear();\n                                this.list.refresh();\n                            } })))\n                        : [{ title: \"There is no available statuses\" }]);\n                });\n            }\n        };\n    }\n    createList() {\n        let f = RouteManager_1.RouteManager.SCHEMA.route.fields;\n        let table = mdt_client_1.legacy.SchemaManagerInstance.get(RouteManager_1.RouteManager.SCHEMA.position.code);\n        const defaultField = table.defauldField;\n        this.list = mdt_client_1.legacy.components.simpleList(table, {\n            disableRowCache: true,\n            events: {\n                inited: [list => this.prepareColumns(list)],\n                prebound: [\n                    data => {\n                        let fetchedPositionRecords = mdt_client_1.legacy.list.HierarchyListExtender.flattenRecords(data.records);\n                        let posIds = fetchedPositionRecords.map(r => r.$id);\n                        if (posIds.length) {\n                            this.routeManager\n                                .getRoutes(this.data.cycle(), posIds)\n                                .then(x => {\n                                let routes = x.records;\n                                fetchedPositionRecords.forEach(position => {\n                                    let route = routes.find(route => route[f.idPosition] == position.$id);\n                                    this.positionRouteHash[position.$id] = route || null;\n                                });\n                            });\n                        }\n                    }\n                ]\n            },\n            filter: mdt_client_1.Filter.eq(f.id, this.data.position()),\n            layout: {\n                id: 1,\n                columns: [\n                    {\n                        title: defaultField === null || defaultField === void 0 ? void 0 : defaultField.title,\n                        width: RouteManager_1.RouteManager.Settings.RouteApprovalDefaultFieldColumnWidth,\n                        code: RouteManager_1.RouteManager.SCHEMA.position.defaultFieldCode\n                    },\n                    ...(this.options.listColumns || [])\n                ]\n            }\n        }, {\n            select: { multi: true },\n            designer: false,\n            form: {\n                add: false\n            },\n            hierarchy: {\n                legacy: true,\n                mode: \"+\",\n                buttonExtend: { visible: false },\n                parentField: \"PositionHistory/ID_PositionParent\",\n                primaryField: \"ID\"\n            },\n            toolbar: {\n                buttons: [\n                    this.getStatusButton(),\n                    {\n                        title: \"Copy into routes\",\n                        icon: \"copy\",\n                        command: () => {\n                            let copyRouteControl = new CopyRouteControl_1.CopyRouteControl(this.data.cycle(), this.list.exts.select\n                                .rows()\n                                .map(r => r.$id), this.positionRouteHash);\n                            mdt_client_1.legacy.ui.show\n                                .modal(copyRouteControl)\n                                .then(() => this.list.refresh());\n                        },\n                        enabled: () => {\n                            let sel = this.list.exts.select.rows();\n                            return sel.length > 0;\n                        }\n                    },\n                    {\n                        title: \"Delete routes\",\n                        icon: \"times\",\n                        enabled: () => {\n                            return (this.getRoutes(this.list.exts.select.rows())\n                                .length > 0);\n                        },\n                        class: \"link-danger\",\n                        command: () => {\n                            let ids = this.getRoutes(this.list.exts.select.rows()).map(r => r && r.$id);\n                            mdt_client_1.legacy.DeleteService\n                                .delete(mdt_client_1.legacy.SchemaManagerInstance.get(RouteManager_1.RouteManager.SCHEMA.route.code), ids)\n                                .then(() => {\n                                this.list.exts.select.clear();\n                                this.list.refresh();\n                            });\n                        }\n                    }\n                ]\n            }\n        });\n        return this.list;\n    }\n    getRoutes(positionRows) {\n        return positionRows\n            ? positionRows\n                .map(x => x.$id)\n                .map(id => this.positionRouteHash[id])\n                .filter(r => !!r)\n            : [];\n    }\n    prepareColumns(list) {\n        list.columns().splice(RouteManager_1.RouteManager.Settings.ConfirmationListColIndex, 0, this.createLinkColumn(), this.createRouteStatusColumn());\n    }\n    createLinkColumn() {\n        let valView = (icon, text, aArgs) => {\n            return mdt_client_1.legacy.ui.el.a(aArgs, null, (0, mdt_client_1.m)(\"span\", mdt_client_1.legacy.ui.el.icon(icon), (0, mdt_client_1.m)(\"span\", mdt_client_1.Utils.getText(text))));\n        };\n        return {\n            title: mdt_client_1.Utils.getText(\"Route\"),\n            width: RouteManager_1.RouteManager.Settings.RouteApprovalDefaultColumnWidth,\n            control: new mdt_client_1.legacy.list.CustomColumnCtrl({\n                value: (ctx) => {\n                    let r = ctx.row;\n                    if (!r.$id)\n                        return;\n                    let route = this.positionRouteHash[r.$id];\n                    if (!this.options.routePagePath)\n                        throw new Error(\"Path to route page not set! Please, contact administrator!\");\n                    let href = `[href='${this.options.routePagePath}${mdt_client_1.legacy.utils.getQueryString({\n                        cycle: this.data.cycle(),\n                        position: r.$id\n                    })}']`;\n                    return route === void 0\n                        ? valView(\"sync-alt spin\", \"Loading...\", \"\")\n                        : route == null\n                            ? valView(\"plus-circle\", \"Create route\", href)\n                            : valView(\"external-link-square\", \"View route\", href);\n                }\n            })\n        };\n    }\n    createRouteStatusColumn() {\n        let valView = (ctx) => {\n            let r = ctx.row;\n            if (!r.$id)\n                return;\n            let route = this.positionRouteHash[r.$id];\n            if (!route)\n                return;\n            let routeSchema = RouteManager_1.RouteManager.SCHEMA.route;\n            let iconPath = mdt_client_1.legacy.list.LabelStyleHelper.getIconPath(routeSchema.code, routeSchema.fields.idStatus);\n            let labelStylePath = mdt_client_1.legacy.list.LabelStyleHelper.getLabelStylePath(routeSchema.code, routeSchema.fields.idStatus);\n            let icon = iconPath\n                ? mdt_client_1.legacy.RecordManagerInstance.valueByPath(route, iconPath)\n                : null;\n            let labelStyle = labelStylePath\n                ? mdt_client_1.legacy.RecordManagerInstance.valueByPath(route, labelStylePath)\n                : null;\n            return mdt_client_1.legacy.list.LabelStyleCellView(icon, labelStyle, mdt_client_1.legacy.RecordManagerInstance.valueByPath(route, routeSchema.fields.idStatus + \"$\"));\n        };\n        return {\n            title: mdt_client_1.Utils.getText(\"Route status\"),\n            width: RouteManager_1.RouteManager.Settings.RouteApprovalDefaultColumnWidth,\n            control: new mdt_client_1.legacy.list.CustomColumnCtrl({\n                value: valView\n            })\n        };\n    }\n}\nexports.RouteApprovalCtrl = RouteApprovalCtrl;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SFRouteColumnType = void 0;\nexports.createTimeColumn = createTimeColumn;\nexports.createTimeVisitColumn = createTimeVisitColumn;\nexports.createWeekColumn = createWeekColumn;\nexports.createDayColumn = createDayColumn;\nconst RouteManager_1 = require(\"RouteManager\");\nconst mdt_client_1 = require(\"mdt-client\");\nconst Formatters_1 = require(\"./Formatters\");\nconst RouteWeekColumn_1 = require(\"./RouteWeekColumn\");\nconst utils_1 = require(\"utils/utils\");\nvar SFRouteColumnType;\n(function (SFRouteColumnType) {\n    SFRouteColumnType[SFRouteColumnType[\"week\"] = 0] = \"week\";\n    SFRouteColumnType[SFRouteColumnType[\"day\"] = 1] = \"day\";\n    SFRouteColumnType[SFRouteColumnType[\"time\"] = 2] = \"time\";\n    SFRouteColumnType[SFRouteColumnType[\"frequency\"] = 3] = \"frequency\";\n    SFRouteColumnType[SFRouteColumnType[\"timeVisit\"] = 4] = \"timeVisit\";\n})(SFRouteColumnType || (exports.SFRouteColumnType = SFRouteColumnType = {}));\nfunction createTimeColumn(ctrl) {\n    return {\n        title: mdt_client_1.Utils.getText(\"Time\"),\n        $routeColumnType: SFRouteColumnType.time,\n        width: RouteManager_1.RouteManager.Settings.DefaultColumnWidth,\n        control: new mdt_client_1.legacy.list.CustomColumnCtrl({\n            value: (ctx) => {\n                let points = ctx.row.$id\n                    ? ctrl.routePointsManager.getPointsByOutlet(ctx.row.$id)\n                    : ctrl.routePointsManager.getData();\n                if (ctrl.currentDay) {\n                    points = points.filter(p => (0, utils_1.compareDates)(p.Date, ctrl.currentDay));\n                }\n                else if (ctrl.currentWeek != null) {\n                    let dates = ctrl.getCurrentWeekData().map(d => (0, utils_1.toISO8601DateString)(d));\n                    points = points.filter(p => dates.includes((0, utils_1.toISO8601DateString)(new Date(p.Date))));\n                }\n                return (0, Formatters_1.formatDuration)(points.reduce((a, b) => a + ctrl.getVisitTime(b), 0) * 60000);\n            }\n        })\n    };\n}\nfunction createTimeVisitColumn(ctrl) {\n    let vCache = {};\n    let ctrlCache = {};\n    let getPoint = (id) => ctrl.routePointsManager.getPoint(id, ctrl.getCurrentDay());\n    let getValue = (id) => {\n        if (vCache[id])\n            return vCache[id];\n        let p = getPoint(id);\n        vCache[id] = p ? p.TimeVisit || RouteManager_1.RouteManager.Settings.TimeVisit : null;\n        return vCache[id];\n    };\n    let getInputCtrl = (id) => {\n        if (ctrlCache[id])\n            return ctrlCache[id];\n        let timeout;\n        ctrlCache[id] = new mdt_client_1.legacy.FormlessFieldCtrl(v => {\n            let p = getPoint(id);\n            if (v === undefined)\n                return p ? p.TimeVisit : null;\n            if (!p)\n                return null;\n            v = parseInt(v);\n            p.TimeVisit = isNaN(v) ? null : v;\n            clearTimeout(timeout);\n            timeout = setTimeout(() => {\n                ctrl.routeManager.saveRoutePoint(p);\n                vCache[id] = undefined;\n            }, RouteManager_1.RouteManager.Settings.TimeVisitUpdateDelay);\n            return p.TimeVisit;\n        }, { code: \"TimeVisit\", type: \"string\" }, {\n            labelMode: mdt_client_1.legacy.LabelMode.Hidden,\n            placeholder: RouteManager_1.RouteManager.Settings.TimeVisit,\n            type: \"number\",\n            visible: () => !!getPoint(id),\n            min: 1\n        });\n        return ctrlCache[id];\n    };\n    let table = mdt_client_1.legacy.SchemaManagerInstance.get(RouteManager_1.RouteManager.SCHEMA.route.code);\n    let field = mdt_client_1.legacy.SchemaManagerInstance.field(table, RouteManager_1.RouteManager.SCHEMA.route.fields.timeVisit);\n    return {\n        title: mdt_client_1.legacy.utils.title(field),\n        $routeColumnType: SFRouteColumnType.timeVisit,\n        width: RouteManager_1.RouteManager.Settings.DefaultColumnWidth,\n        control: new mdt_client_1.legacy.list.CustomColumnCtrl({\n            value: (ctx) => {\n                if (!ctx.row.$id)\n                    return \"\";\n                if (ctrl.isReadonly()) {\n                    return getValue(ctx.row.$id);\n                }\n                mdt_client_1.legacy.ui.m.addClass(ctx.td, \"route-col_inline-cell\");\n                return mdt_client_1.legacy.view(getInputCtrl(ctx.row.$id));\n            }\n        })\n    };\n}\nfunction createWeekColumn(idx, weekData, ctrl) {\n    return {\n        title: (0, Formatters_1.formatWeekTitle)(idx),\n        $routeColumnType: SFRouteColumnType.week,\n        width: RouteManager_1.RouteManager.Settings.DefaultColumnWidth,\n        control: new RouteWeekColumn_1.RouteWeekColumn({\n            value: (ctx) => {\n                let dates = weekData.map(data => (0, utils_1.toISO8601DateString)(data));\n                let points = ctrl.routePointsManager.getPointsByOutlet(ctx.row.$id);\n                points = points.filter(r => dates.includes((0, utils_1.toISO8601DateString)(new Date(r.Date))));\n                if (!points || !points.length)\n                    return \"\";\n                if (points.length == 1)\n                    return RouteWeekColumn_1.RouteWeekColumnTemplates.one();\n                if (points.length > 1)\n                    return RouteWeekColumn_1.RouteWeekColumnTemplates.many(\"\" + points.length);\n                return \"\";\n            },\n            active: () => !ctrl.routePointsManager.state.pending(),\n            onclick: () => {\n                ctrl.setWeekIndex(idx);\n            },\n            onHeadClick: () => {\n                ctrl.setWeekIndex(idx);\n            },\n            isHeadCheckboxChecked: () => ctrl.isWeekSelected(idx),\n            onHeadCheckboxClick: () => ctrl.selectWeek(weekData, idx)\n        })\n    };\n}\nfunction createDayColumn(date, dateIndexInCycle, weekIndex, ctrl) {\n    return {\n        title: (0, Formatters_1.dayWithName)(date),\n        $routeColumnType: SFRouteColumnType.day,\n        width: RouteManager_1.RouteManager.Settings.DefaultColumnWidth,\n        control: new RouteWeekColumn_1.RouteWeekColumn({\n            value: (ctx) => {\n                let point = ctrl.routePointsManager.getPoint(ctx.row.ID, date);\n                return (0, mdt_client_1.m)(\"\", point ? RouteWeekColumn_1.RouteWeekColumnTemplates.day(point.SortOrder) : \"\");\n            },\n            active: () => !ctrl.routePointsManager.state.pending(),\n            onclick: (ctx) => {\n                if (!ctx.row.ID || ctrl.isReadonly())\n                    return;\n                ctrl.routePointsManager.toggle(ctx.row, date);\n                mdt_client_1.legacy.ui.redraw();\n            },\n            onHeadClick: () => {\n                ctrl.setDay(date, true);\n            },\n            isHeadCheckboxChecked: () => ctrl.isDaySelected(date),\n            onHeadCheckboxClick: () => ctrl.selectDay(date, weekIndex, dateIndexInCycle)\n        })\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DateTimeCtrl = exports.DateTimeControl = exports.DateTimeControlType = void 0;\nconst mdt_client_1 = require(\"mdt-client\");\nconst Formatters_1 = require(\"routeManagement/Formatters\");\nconst utils_1 = require(\"utils/utils\");\nvar DateTimeControlType;\n(function (DateTimeControlType) {\n    DateTimeControlType[DateTimeControlType[\"date\"] = 0] = \"date\";\n    DateTimeControlType[DateTimeControlType[\"week\"] = 1] = \"week\";\n})(DateTimeControlType || (exports.DateTimeControlType = DateTimeControlType = {}));\nclass DateTimeControl {\n    constructor(data, options, ctx) {\n        this.data = data;\n        this.options = options;\n        this.ctx = ctx;\n        if (options.type === DateTimeControlType.date)\n            this.control = new mdt_client_1.legacy.FormlessFieldCtrl(v => {\n                if (v === undefined)\n                    return this.data.date || unselectedObject;\n                this.data.date = v;\n                ctx.row.$rendered = false;\n                return this.data.date;\n            }, {}, {\n                control: mdt_client_1.legacy.DateTextFieldCtrl,\n                labelMode: mdt_client_1.legacy.LabelMode.Hidden,\n                disableDayFn: (date) => {\n                    return (0, utils_1.toISO8601DateString)(date) < (0, utils_1.toISO8601DateString)(options.cyclePeriod.cycleBegin) || (0, utils_1.toISO8601DateString)(date) > (0, utils_1.toISO8601DateString)(options.cyclePeriod.cycleEnd);\n                },\n                customControl: new DateTimeCtrl(this.data, {\n                    cyclePeriod: options.cyclePeriod,\n                    cyclePeriods: options.cyclePeriods\n                }),\n                readonly: options.readonly(),\n            });\n        else\n            this.weekControl = new DateTimeCtrl(this.data, {\n                cyclePeriod: options.cyclePeriod,\n                cyclePeriods: options.cyclePeriods\n            });\n    }\n    selectPeriodItem(index, item) {\n        this.data = Object.assign({}, item);\n        this.weekControl.data = this.data;\n        this.ctx.row.To = Object.assign({}, item);\n        this.ctx.row.$rendered = false;\n    }\n}\nexports.DateTimeControl = DateTimeControl;\nmdt_client_1.legacy.viewer(DateTimeControl, ctrl => {\n    var o = ctrl.options;\n    if (o.type === DateTimeControlType.date)\n        return mdt_client_1.legacy.view(ctrl.control);\n    return (0, mdt_client_1.m)(\".select-wrapper\", (0, mdt_client_1.m)(\".selected-info\", mdt_client_1.legacy.view(ctrl.weekControl)), o.cyclePeriod ? (0, mdt_client_1.m)(\".select-icon\", {\n        onclick: (e) => {\n            if (o.readonly())\n                return;\n            let dd = new mdt_client_1.legacy.DropdownMenuCtrl();\n            mdt_client_1.legacy.ui.viewState(dd).target = e.target;\n            dd.show(o.selectableWeekDates().map((x, i) => {\n                return {\n                    control: new DateTimeCtrl(x, {\n                        onclick: () => {\n                            ctrl.selectPeriodItem(i, x);\n                            dd.close();\n                        },\n                        cyclePeriods: ctrl.options.cyclePeriods\n                    }),\n                    wrapTag: \"a\"\n                };\n            }));\n        }\n    }, mdt_client_1.legacy.ui.el.icon(\"calendar\")) : null);\n});\nclass DateTimeCtrl {\n    constructor(data, options = {}) {\n        this.data = data;\n        this.options = options;\n    }\n}\nexports.DateTimeCtrl = DateTimeCtrl;\nfunction getWeekIndexInCycle(period, date) {\n    return period.findIndex(d => d.find(d => (0, utils_1.compareDates)(d, date)));\n}\nmdt_client_1.legacy.viewer(DateTimeCtrl, ctrl => {\n    var d = ctrl.data;\n    var o = ctrl.options;\n    if (d.date && o.cyclePeriod)\n        d.cycleWeekIndex = getWeekIndexInCycle(o.cyclePeriod.periodLikeArray, d.date);\n    return (0, mdt_client_1.m)(`${o.tag}.select-wrapper`, {\n        onclick: () => o.onclick && o.onclick()\n    }, !d.date && !d.week ? mdt_client_1.Utils.getText(\"Not selected\")\n        : (0, mdt_client_1.m)(\"\", (0, mdt_client_1.m)(\"\", d.date\n            ? (0, Formatters_1.dayWithName)(d.date)\n            : (0, Formatters_1.formatWeekDates)(d.week)), (0, mdt_client_1.m)(\"\", `${(0, Formatters_1.formatYearWeekTitle)(d.date || d.week[0], o.cyclePeriods)} (${(0, Formatters_1.formatWeekTitle)(d.cycleWeekIndex)})`)), o.cyclePeriod && d.date ? (0, mdt_client_1.m)('.select-icon.calendar', null, mdt_client_1.legacy.ui.el.icon(\"calendar\")) : null);\n});\nconst unselectedObject = {\n    toDateString: () => mdt_client_1.Utils.getText(\"Not selected\")\n};\n","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CopyRouteControl = void 0;\nconst RouteManager_1 = require(\"RouteManager\");\nconst CopyRouteManager_1 = require(\"./CopyRouteManager\");\nconst mdt_client_1 = require(\"mdt-client\");\nconst MatchControls_1 = require(\"./MatchControls\");\nlet FormManagerEventRegistred = false;\nconst fullWidthClass = \"routes-copy-to\";\nclass CopyRouteControl {\n    constructor(cycleId, posIds, positionRouteHash, mapping, onClose, cyclePeriods) {\n        this.mapping = mapping;\n        this.matchControls = {};\n        this.prepareLayout = (layout) => {\n            const prepareHint = (layout) => {\n                const hintCol = layout\n                    .cols()\n                    .find((col) => col.options.content.startsWith(\"**Внимание! Для копирования маршрутов\"));\n                const hintText = this.mapping\n                    ? \"**Внимание! Для копирования маршрутов необходимо выполнить следующие действия**\\n - Перейти в маршрут, **из** которого планируется произвести копирование\\n - Выбрать дни или недели, которые планируется скопировать \\n - Нажать кнопку `Скопировать`\\n - Выбрать Цикл, **в** который необходимо произвести копирование\\n - Сопоставить дни или недели друг с другом\\n - Нажать кнопку `Скопировать`\\n\\n*Можно копировать из любого Цикла в любой Цикл в прошлом или будущем*\"\n                    : \"**Внимание! Для копирования маршрутов необходимо выполнить следующие действия**\\n - Перейти в маршрут, **из** которого планируется произвести копирование\\n - Нажать кнопку `Скопировать`\\n - Выбрать Цикл, **в** который необходимо произвести копирование\\n - Нажать кнопку `Скопировать`\\n\\n*Можно копировать из любого Цикла в любой Цикл в прошлом или будущем*\";\n                if (hintCol)\n                    hintCol.options.content = hintText;\n            };\n            var l = new mdt_client_1.legacy.LayoutBuilder(layout)\n                .updateFieldOptions(\"ID_CycleFrom\", (col) => {\n                col.options.visible = false;\n            })\n                .updateFieldOptions(\"ID_CycleTo\", (col) => {\n                if (!this.mapping)\n                    col.options.filter = () => mdt_client_1.Filter.ne(\"ID\", this.copyManager.cycleId);\n                col.options.hintSelect = [\"DateBegin\", \"DateEnd\"];\n            })\n                .updateFieldOptions(\"ID_PositionsTemp\", (col) => {\n                col.options.css = fullWidthClass;\n                col.options.control = \"grid\";\n                col.options.listOptions = {\n                    events: {\n                        inited: [this.preparePositionsListColumns]\n                    }\n                };\n                col.options.listExtenders = {\n                    toolbar: false,\n                    designer: false\n                };\n            });\n            prepareHint(l);\n            if (this.copyManager.matchControlsAvailable()) {\n                if (!this.periodsList) {\n                    this.periodsList = new mdt_client_1.legacy.ListCtrl(this.copyManager.periodsTable, {\n                        root: true,\n                        records: this.copyManager.mappingRecords(),\n                        layout: {\n                            columns: [\"From\", \"To\"].map((f) => {\n                                return {\n                                    title: mdt_client_1.Utils.getText(f),\n                                    control: new mdt_client_1.legacy.list.CustomColumnCtrl({\n                                        value: (ctx) => {\n                                            var ctrl = this.getDateTimeControl(ctx.row, f, ctx, f === \"From\");\n                                            return mdt_client_1.legacy.view(ctrl);\n                                        }\n                                    })\n                                };\n                            })\n                        }\n                    }, {\n                        designer: false\n                    });\n                }\n                if (!mdt_client_1.legacy.LayoutBuilder.find(l.layout, (i) => i.$system && i.type == \"periodsList\")) {\n                    l.add({\n                        type: \"markdown\",\n                        options: {\n                            content: mdt_client_1.Utils.getText(\"Matching periods\")\n                        },\n                        $system: true\n                    });\n                    l.add({\n                        width: 12,\n                        control: {\n                            $view: () => (0, mdt_client_1.m)(\".\" + fullWidthClass, mdt_client_1.legacy.view(this.periodsList))\n                        },\n                        $system: true,\n                        type: \"periodsList\"\n                    });\n                }\n            }\n        };\n        this.preparePositionsListColumns = (list) => {\n            this.positionsList = list;\n            list.columns().splice(RouteManager_1.RouteManager.Settings.ConfirmationListColIndex, 0, this.createColumn());\n        };\n        this.copyManager = new CopyRouteManager_1.CopyRouteManager(cycleId, posIds, positionRouteHash, mapping);\n        this.routeDataManager = new RouteManager_1.RouteManager();\n        this.cyclePeriods = cyclePeriods;\n        if (!FormManagerEventRegistred) {\n            mdt_client_1.legacy.FormLayoutManager.events.itemCreated.push((col, field) => {\n                if (field && field.table.code == CopyRouteManager_1.CopyRouteManager.tableCode)\n                    col.width = 12;\n            });\n            FormManagerEventRegistred = true;\n        }\n        this.content = new mdt_client_1.legacy.FormCtrl(this.copyManager.table, null, {\n            record: this.copyManager.record,\n            datasource: this.routeDataManager.copyRoutesDataSource({\n                prepareRecord: (rec) => this.copyManager.prepareRecord(rec)\n            }),\n            primaryButton: {\n                title: \"routes:Copy\",\n                icon: \"copy\",\n                type: \"primary\",\n                enabled: () => this.copyManager.isCopyEnabled()\n            },\n            events: {\n                layout: {\n                    begin: [this.prepareLayout]\n                },\n                updated: [\n                    (field) => {\n                        field.code == \"ID_CycleTo\" &&\n                            this.copyManager.onCycleUpdate().then(() => {\n                                this.matchControls = {};\n                                [this.periodsList, this.positionsList].forEach((list) => {\n                                    list && list.rows().forEach((r) => (r.$rendered = null));\n                                });\n                            });\n                    }\n                ],\n                closed: [() => onClose && onClose()]\n            }\n        });\n    }\n    initContainer(container, options) {\n        this.content.initContainer(container, options);\n    }\n    createColumn() {\n        return {\n            title: mdt_client_1.Utils.getText(\"Action\"),\n            control: new mdt_client_1.legacy.list.CustomColumnCtrl({\n                value: (ctx) => {\n                    if (!ctx.row || !ctx.row.$id)\n                        return;\n                    let id = ctx.row.$id;\n                    let curRoute = this.copyManager.routeById(id);\n                    let canOverride = this.copyManager.canOverride(id);\n                    let text = \"\";\n                    let title = \"\";\n                    let classes = \".label\";\n                    if (!canOverride) {\n                        const hintText = this.copyManager.selectedCycle\n                            ? \"Route on target cycle already exist and can't be deleted\"\n                            : \"No cycle selected for copy\";\n                        title = mdt_client_1.Utils.getText(hintText);\n                        text = mdt_client_1.Utils.getText(\"Inpossible to copy\");\n                        classes += \".label-warning\";\n                    }\n                    else if (this.copyManager.prevRoutesHash[id]) {\n                        title = mdt_client_1.Utils.getText(\"Route will be copied\");\n                        text = mdt_client_1.Utils.getText(\"routes:Copy\");\n                        classes += \".label-primary\";\n                    }\n                    else if (this.copyManager.prevRoutesHash[id] === null) {\n                        title = mdt_client_1.Utils.getText(\"There is no route on this cycle for position\");\n                        text = mdt_client_1.Utils.getText(\"No route\");\n                        classes += \".label-warning\";\n                    }\n                    return (0, mdt_client_1.m)(\"span\" + classes, { title }, text);\n                }\n            })\n        };\n    }\n    getDateTimeControl(row, fieldCode, ctx, readonly) {\n        var from = row.From.date || row.From.cycleWeekIndex;\n        var ctrlType = row.From.date ? MatchControls_1.DateTimeControlType.date : MatchControls_1.DateTimeControlType.week;\n        if (!this.matchControls[from])\n            this.matchControls[from] = {};\n        if (!this.matchControls[from][fieldCode]) {\n            var control = readonly\n                ? new MatchControls_1.DateTimeCtrl(row[fieldCode], { cyclePeriods: this.cyclePeriods })\n                : new MatchControls_1.DateTimeControl(row[fieldCode], {\n                    type: ctrlType,\n                    readonly: () => !this.copyManager.matchControlsEditable(),\n                    cyclePeriod: this.copyManager.getCyclePeriod(),\n                    cyclePeriods: this.cyclePeriods,\n                    selectableWeekDates: () => this.copyManager.selectableWeekDates()\n                }, ctx);\n            this.matchControls[from][fieldCode] = control;\n        }\n        return this.matchControls[from][fieldCode];\n    }\n}\nexports.CopyRouteControl = CopyRouteControl;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NotBoundRowTransformer = void 0;\nconst mdt_client_1 = require(\"mdt-client\");\nclass NotBoundRowTransformer {\n    constructor(routePageCtrl) {\n        this.routePageCtrl = routePageCtrl;\n    }\n    $view(ctrl, ctx) {\n        let id = ctx.row.$id;\n        if (!ctx.row.$id)\n            return;\n        let isNotBound = ctrl.routePageCtrl.isNotBound(id);\n        if (isNotBound)\n            mdt_client_1.legacy.ui.m.addClass(ctx.tr, \"route-row_is-not-bound\");\n    }\n}\nexports.NotBoundRowTransformer = NotBoundRowTransformer;\n","\n      import API from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!./module.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!./module.css\";\n       export default content && content.locals ? content.locals : undefined;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formatWeekTitle = formatWeekTitle;\nexports.formatWeekDates = formatWeekDates;\nexports.formatDayTitle = formatDayTitle;\nexports.formatDay = formatDay;\nexports.formatDuration = formatDuration;\nexports.dayWithName = dayWithName;\nexports.formatYearWeekTitle = formatYearWeekTitle;\nconst mdt_client_1 = require(\"mdt-client\");\nconst utils_1 = require(\"utils/utils\");\nfunction formatWeekTitle(idx) {\n    return `${(0, utils_1.romanize)(idx + 1)} ${mdt_client_1.Utils.getText(\"week\")}`;\n}\nfunction formatWeekDates(weekDays) {\n    if (!weekDays[0])\n        return '';\n    let beginDate = weekDays[0];\n    let endDate = weekDays[weekDays.length - 1];\n    return `${formatDay(beginDate)} - ${formatDay(endDate)}`;\n}\nfunction formatDayTitle(date) {\n    return mdt_client_1.Utils.getText(utils_1.shortDayNames[date.getDay()]);\n}\nfunction formatDay(date) {\n    return `${date.getDate()} ${mdt_client_1.Utils.getText(utils_1.shortMonthNames[date.getMonth()]).toLowerCase()}`;\n}\nfunction formatDuration(duration) {\n    let v = (0, utils_1.getTimeValues)(duration);\n    let h = v.days * 24 + v.hours;\n    return h || v.minutes ? `${mdt_client_1.legacy.utils.pad2(h)}:${mdt_client_1.legacy.utils.pad2(v.minutes)}` : \"\";\n}\nfunction dayWithName(date) {\n    return `${formatDayTitle(date)}, ${formatDay(date)}`;\n}\nfunction formatYearWeekTitle(date, cyclePeriods) {\n    let weekNumber = -1;\n    if (!cyclePeriods)\n        return;\n    cyclePeriods.forEach((period) => {\n        if (date >= period.DateBegin && date <= period.DateEnd) {\n            weekNumber = period.NumberInYear;\n            return;\n        }\n    });\n    return `${weekNumber} нед ${date.getFullYear()}`;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RouteManagementPage = void 0;\nconst mdt_client_1 = require(\"mdt-client\");\nconst RouteManagementCtrl_1 = require(\"./RouteManagementCtrl\");\nclass RouteManagementPage extends RouteManagementCtrl_1.RouteManagementCtrl {\n    constructor(node) {\n        let settings;\n        try {\n            settings = node.controlTemplate\n                ? JSON.parse(node.controlTemplate)\n                : {};\n        }\n        catch (e) {\n            console.log(\"Warning: wrong navigation node config!\", e);\n        }\n        settings.cyclePicker = Object.assign({ autopick: {\n                sorting: [{ path: \"DateBegin\", asc: true }],\n                filter: mdt_client_1.Filter.ge(\"DateBegin\", new Date())\n            }, searchOperation: \"contains\" }, settings.cyclePicker);\n        settings.positionPicker = Object.assign({ autopick: {\n                sorting: [{ path: \"ID\", asc: false }],\n                filter: {\n                    op: \"eq\",\n                    p1: \"EmployeeHistory/ID_Employee/ID_mdt_Principal\",\n                    p2: \"ID_CURRENT_USER\"\n                }\n            }, searchOperation: \"contains\" }, settings.positionPicker);\n        super(Object.assign({ table: mdt_client_1.legacy.SchemaManagerInstance.get(node.id_Object) }, settings));\n    }\n}\nexports.RouteManagementPage = RouteManagementPage;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nc = undefined;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst RouteManager_1 = require(\"RouteManager\");\nconst mdt_client_1 = require(\"mdt-client\");\nconst RouteManagementPage_1 = require(\"routeManagement/RouteManagementPage\");\nconst RouteApprovalPage_1 = require(\"routesApproval/RouteApprovalPage\");\nrequire(\"./styles/module.css\");\n(0, mdt_client_1.registerModule)(() => {\n    mdt_client_1.Navigation.registerPageCtrl(RouteManagementPage_1.RouteManagementPage, 'RouteManagementPage');\n    mdt_client_1.Navigation.registerPageCtrl(RouteApprovalPage_1.RouteApprovalPage, 'RouteApprovalPage');\n    if (mdt_client_1.SecurityManager.getUser().isAnonymous)\n        return;\n    RouteManager_1.RouteManager.fetchSettings();\n});\n"],"names":[],"sourceRoot":""}