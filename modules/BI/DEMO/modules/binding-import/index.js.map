{"version":3,"file":"index.js","mappings":";;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB,mBAAO,CAAC,GAAY;AACzC,oCAAoC,mBAAO,CAAC,GAA6B;AACzE,4BAA4B,mBAAO,CAAC,GAAqB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;AC5Da;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;;;;;;;ACVb;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,6BAA6B,mBAAO,CAAC,GAA2B;AAChE,6BAA6B,mBAAO,CAAC,GAA2B;AAChE,qBAAqB,mBAAO,CAAC,GAAY;AACzC;AACA;AACA;AACA;AACA,4DAA4D,mBAAmB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;ACrGa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,GAAG,cAAc,GAAG,eAAe,GAAG,WAAW,GAAG,cAAc,GAAG,oBAAoB,GAAG,sBAAsB,GAAG,qBAAqB,GAAG,sBAAsB,GAAG,YAAY,GAAG,YAAY,GAAG,cAAc,GAAG,SAAS,GAAG,WAAW,GAAG,UAAU,GAAG,aAAa,GAAG,cAAc,GAAG,oBAAoB,GAAG,sBAAsB,GAAG,YAAY,GAAG,mBAAmB,GAAG,YAAY,GAAG,mBAAmB,GAAG,uBAAuB,GAAG,kBAAkB,GAAG,WAAW;AACve,qCAAqC,mBAAO,CAAC,GAAiB;AAC9D,WAAW;AACX,kBAAkB,2BAA2B,uBAAuB,gCAAgC,mBAAmB,4BAA4B,YAAY,qBAAqB,mBAAmB,4BAA4B,YAAY,qBAAqB,sBAAsB,+BAA+B,oBAAoB,6BAA6B,cAAc,uBAAuB,aAAa,sBAAsB,UAAU,mBAAmB,WAAW,oBAAoB,SAAS,kBAAkB,cAAc,uBAAuB,YAAY,qBAAqB,YAAY,qBAAqB,sBAAsB,+BAA+B,qBAAqB,8BAA8B,sBAAsB,+BAA+B,oBAAoB,6BAA6B,cAAc,uBAAuB,WAAW,oBAAoB,eAAe,wBAAwB,cAAc;AACv7B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,sBAAsB;AACtB;;;;;;;AChBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,qBAAqB,mBAAO,CAAC,GAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sBAAsB,uBAAuB,GAAG,4BAA4B,MAAM,gCAAgC,GAAG,2BAA2B;AAChJ,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD,KAAK;AACL;;;;;;;;ACxFa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,qBAAqB,mBAAO,CAAC,GAAY;AACzC;AACA;AACA,wEAAwE,gBAAgB;AACxF;AACA;AACA,0BAA0B;;;;;;;;;;;;;;;ACTb;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iCAAiC;AACjC,qBAAqB,mBAAO,CAAC,GAAY;AACzC,mBAAmB,mBAAO,CAAC,GAAY;AACvC,mBAAmB,mBAAO,CAAC,GAAY;AACvC;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,iCAAiC;;;;;;;;ACvCpB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,qBAAqB,mBAAO,CAAC,GAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,yBAAyB;;;;;;;UC7BzB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;ACtBa;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D,mBAAO,CAAC,EAAiB","sources":["webpack://binding-import/./_core/module.ts","webpack://binding-import/./_core/File/BindingFileRequest.ts","webpack://binding-import/./_core/Importer.ts","webpack://binding-import/./node_modules/mdt-client/dist/index.js","webpack://binding-import/./_core/Exporter.ts","webpack://binding-import/./_core/File/BindingFileManager.ts","webpack://binding-import/./_core/BindingImportListExtender.ts","webpack://binding-import/./_core/BindingUploadCtrl.ts","webpack://binding-import/webpack/bootstrap","webpack://binding-import/./src/index.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mdt_client_1 = require(\"mdt-client\");\nconst BindingImportListExtender_1 = require(\"./BindingImportListExtender\");\nconst BindingUploadCtrl_1 = require(\"./BindingUploadCtrl\");\n(0, mdt_client_1.registerModule)(() => {\n    mdt_client_1.legacy.ListServiceInstance.ext(BindingImportListExtender_1.BindingImportListExtender);\n    mdt_client_1.FormService.registerControl({\n        code: \"bind:FileLoad\",\n        title: \"bind:FileLoad\",\n        enabled: () => false,\n        type: BindingUploadCtrl_1.BindingUploadCtrl\n    });\n    appendSettingsFormByAliasForm();\n}, {\n    name: \"binding-import\"\n});\nfunction appendSettingsFormByAliasForm() {\n    const formService = mdt_client_1.legacy.FormServiceInstance;\n    formService.events.init.push((form) => {\n        if (form.table.code !== \"bind.Settings\")\n            return;\n        form.events.layout.begin.push((layout) => {\n            if (!form.getContext(\"isAliasAdded\")) {\n                const lb = new mdt_client_1.legacy.LayoutBuilder(layout);\n                lb.addField(\"ID_Alias\", {\n                    control: \"form\"\n                }, 12);\n                form.setContext(\"isAliasAdded\", true);\n            }\n        });\n    });\n    formService.events.init.push((form) => {\n        var _a;\n        if (form.table.code !== \"bind.Alias\")\n            return;\n        if (((_a = form.options.parent) === null || _a === void 0 ? void 0 : _a.table.code) !== \"bind.Settings\") {\n            form.options.readonly = true;\n            return;\n        }\n        const settingsForm = form.options.parent;\n        const fieldParts = [\"Target\", \"Source\", \"Dimension\"];\n        form.events.layout.begin.push((layout) => {\n            fieldParts.forEach((fieldPart) => {\n                const field = mdt_client_1.legacy.LayoutBuilder.findField(layout, \"ID_mdt_ObjectField\" + fieldPart);\n                const settingsFieldValue = () => settingsForm.value(\"ID_Object\" + fieldPart);\n                field.options.filter$ = () => mdt_client_1.Filter.eq(\"ID_Object\", settingsFieldValue());\n                field.options.readonly$ = () => (settingsFieldValue() ? false : true);\n            });\n        });\n        settingsForm.events.updated.push((f, v) => {\n            var updatedFieldPart = fieldParts.find((i) => f.code.endsWith(i));\n            if (updatedFieldPart) {\n                form.forceEvaluate();\n                if (!v) {\n                    form.value(\"ID_mdt_ObjectField\" + updatedFieldPart, null);\n                }\n            }\n        });\n    });\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BindingFileRequest = void 0;\nclass BindingFileRequest {\n    constructor(FileGuid, date, TableCode) {\n        this.FileGuid = FileGuid;\n        this.TableCode = TableCode;\n        this.Date = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)).toISOString();\n    }\n}\nexports.BindingFileRequest = BindingFileRequest;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.importFromExcel = importFromExcel;\nconst BindingFileRequest_1 = require(\"./File/BindingFileRequest\");\nconst BindingFileManager_1 = require(\"./File/BindingFileManager\");\nconst mdt_client_1 = require(\"mdt-client\");\nfunction importFromExcel(list, settingsRecord) {\n    const settingsTable = mdt_client_1.legacy.SchemaManagerInstance._table(settingsRecord.ID_ObjectBinding);\n    const isHistoricalBinding = settingsRecord.FlagHistoryBinding;\n    const buttonEnabled = () => formCtrl.value(\"DateBegin\") && formCtrl.getContext(\"fileUID\");\n    const instructionsCode = `binding-import.Instructions.${settingsTable.code}`;\n    const instructionsContent = mdt_client_1.Utils.getText(instructionsCode);\n    const isInstructionsVisible = instructionsContent !== instructionsCode;\n    let formCtrl;\n    const onExecute = () => {\n        const fileUID = formCtrl.getContext(\"fileUID\");\n        const date = formCtrl.record().DateBegin;\n        const tableCode = settingsTable.code;\n        const req = new BindingFileRequest_1.BindingFileRequest(fileUID, date, tableCode);\n        return BindingFileManager_1.BindingFileManager.uploadBindings(req);\n    };\n    const onError = () => {\n        list.refresh();\n    };\n    const onSuccess = () => {\n        list.refresh();\n    };\n    let onSave = (r) => {\n        onExecute().then((response) => {\n            onSuccess();\n        }, (error) => {\n            onError();\n        });\n    };\n    let layout = {\n        rows: [\n            {\n                cols: [\n                    {\n                        width: 12,\n                        options: {\n                            content: instructionsContent,\n                            visible: isInstructionsVisible\n                        },\n                        type: \"markdown\"\n                    },\n                    {\n                        width: 6,\n                        type: \"field\",\n                        options: {\n                            field: \"DateBegin\",\n                            visible: isHistoricalBinding\n                        }\n                    },\n                    {\n                        width: 6,\n                        type: \"bind:FileLoad\",\n                        options: {\n                            field: \"File\"\n                        }\n                    }\n                ]\n            }\n        ]\n    };\n    const table = {\n        code: \"bind.Import\",\n        title: \"Import\",\n        fields: [\n            {\n                type: \"date\",\n                code: \"DateBegin\",\n                title: mdt_client_1.Utils.getText(\"Date start\"),\n                defaultValue: new Date()\n            }\n        ],\n        $datasource: {\n            fetch: () => { },\n            save: (record) => {\n                const result = onSave(record);\n                if (mdt_client_1.legacy.utils.isPromisable(result))\n                    return result;\n                return Promise.resolve(record);\n            }\n        }\n    };\n    const preparedTable = mdt_client_1.legacy.SchemaManagerInstance.prepare(table);\n    const record = { $table: preparedTable };\n    formCtrl = new mdt_client_1.legacy.FormCtrl(preparedTable, null, {\n        hideSubtitle: true,\n        layout,\n        record,\n        primaryButton: {\n            code: \"bind.Import\",\n            title: \"fileInputCtrl:upload\",\n            type: \"primary\",\n            icon: \"save\",\n            enabled: buttonEnabled\n        }\n    });\n    mdt_client_1.Ui.showSidebar(formCtrl);\n}\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.registerModule = exports.legacy = exports.modules = exports.App = exports.Schema = exports.UiComponents = exports.ModuleRegistry = exports.RecordManager = exports.CommandManager = exports.Page = exports.Auth = exports.Filter = exports.m = exports.Api = exports.Ui = exports.Utils = exports.mUtils = exports.FieldControl = exports.ControlManager = exports.Form = exports.FormService = exports.List = exports.ListService = exports.SecurityManager = exports.Navigation = exports.MDT = void 0;\r\nvar package_json_1 = __importDefault(require(\"../package.json\"));\r\nexports.MDT = window.MDT;\r\nexports.Navigation = exports.MDT.Navigation, exports.SecurityManager = exports.MDT.SecurityManager, exports.ListService = exports.MDT.ListService, exports.List = exports.MDT.List, exports.FormService = exports.MDT.FormService, exports.Form = exports.MDT.Form, exports.ControlManager = exports.MDT.ControlManager, exports.FieldControl = exports.MDT.FieldControl, exports.mUtils = exports.MDT.mUtils, exports.Utils = exports.MDT.Utils, exports.Ui = exports.MDT.Ui, exports.Api = exports.MDT.Api, exports.m = exports.MDT.m, exports.Filter = exports.MDT.Filter, exports.Auth = exports.MDT.Auth, exports.Page = exports.MDT.Page, exports.CommandManager = exports.MDT.CommandManager, exports.RecordManager = exports.MDT.RecordManager, exports.ModuleRegistry = exports.MDT.ModuleRegistry, exports.UiComponents = exports.MDT.UiComponents, exports.Schema = exports.MDT.Schema, exports.App = exports.MDT.App, exports.modules = exports.MDT.modules, exports.legacy = exports.MDT.legacy;\r\nfunction registerModule(callback, context) {\r\n    exports.MDT.registerModule(callback, {\r\n        version: package_json_1.default.version,\r\n        name: context === null || context === void 0 ? void 0 : context.name\r\n    });\r\n}\r\nexports.registerModule = registerModule;\r\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.exportToExcel = exportToExcel;\nconst mdt_client_1 = require(\"mdt-client\");\nfunction exportToExcel(listFacade, settingsRecord) {\n    const api = mdt_client_1.legacy.ApiServiceInstance;\n    const exportApi = new mdt_client_1.legacy.ExportApiAccessor(api);\n    const list = listFacade.getListCtrl();\n    const tablesIds = [\n        settingsRecord.ID_ObjectDimension,\n        settingsRecord.ID_ObjectSource,\n        settingsRecord.ID_ObjectTarget\n    ];\n    let query = {\n        select: [\n            \"ID_mdt_ObjectFieldSource/Code as SourceFieldCode\",\n            \"ID_mdt_ObjectFieldSource/ID_Object/Code as SourceObjectCode\",\n            \"ID_mdt_ObjectFieldTarget/Code as TargetFieldCode\",\n            \"ID_mdt_ObjectFieldTarget/ID_Object/Code as TargetObjectCode\",\n            \"ID_mdt_ObjectFieldDimension/Code as DimensionFieldCode\",\n            \"ID_mdt_ObjectFieldDimension/ID_Object/Code as DimensionObjectCode\"\n        ],\n        filter: mdt_client_1.Filter.eq(\"ID_Settings\", settingsRecord.ID)\n    };\n    mdt_client_1.legacy.ApiServiceInstance.fetch(query, \"bind.Alias\").then((fetchResult) => {\n        const fieldAliasesForBindingObjects = {};\n        if (fetchResult.records.length != 0) {\n            const record = fetchResult.records[0];\n            if (record.TargetFieldCode) {\n                fieldAliasesForBindingObjects[record.TargetObjectCode] = record.TargetFieldCode;\n            }\n            if (record.SourceFieldCode) {\n                fieldAliasesForBindingObjects[record.SourceObjectCode] = record.SourceFieldCode;\n            }\n            if (record.DimensionFieldCode) {\n                fieldAliasesForBindingObjects[record.DimensionObjectCode] = record.DimensionFieldCode;\n            }\n        }\n        const fieldsToSelectParams = {};\n        list.table.fields.forEach((x) => {\n            var _a, _b;\n            if (!x.refTable)\n                return;\n            const tableRef = (_a = x.refTable) !== null && _a !== void 0 ? _a : x.table;\n            if (!tableRef)\n                return;\n            const tableId = tableRef.$id;\n            if (!tablesIds.includes(tableId))\n                return;\n            var orderInFile = 0;\n            switch (tableId) {\n                case settingsRecord.ID_ObjectTarget:\n                    orderInFile = 1;\n                    break;\n                case settingsRecord.ID_ObjectSource:\n                    orderInFile = 2;\n                    break;\n                case settingsRecord.ID_ObjectDimension:\n                    orderInFile = 3;\n                    break;\n            }\n            fieldsToSelectParams[tableRef.code] = {\n                foreignKeyField: x.code,\n                foreignedTableField: (_b = fieldAliasesForBindingObjects[tableRef.code]) !== null && _b !== void 0 ? _b : \"ID\",\n                foreignedTableFieldTitle: tableRef.title,\n                orderInFile: orderInFile\n            };\n        });\n        const columns = Object.entries(fieldsToSelectParams)\n            .sort((a, b) => {\n            if (a[1].orderInFile < b[1].orderInFile)\n                return -1;\n            else\n                return 1;\n        })\n            .map(([_, record]) => {\n            return `${record.foreignKeyField}/${record.foreignedTableField} as [${record.foreignedTableFieldTitle}(${record.foreignedTableField})]`;\n        });\n        const query = {\n            select: columns,\n            sorting: list.paging.sorting.list,\n            filter: list.filterSet.get(),\n            table: list.table,\n            export: \"excel\",\n            options: list.queryOptions()\n        };\n        exportApi.export(query, { method: \"POST\" });\n    });\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BindingFileManager = void 0;\nconst mdt_client_1 = require(\"mdt-client\");\nclass BindingFileManager {\n    static uploadBindings(req) {\n        return mdt_client_1.Api.request(\"binding/UploadBinding\", req, { method: \"POST\" });\n    }\n}\nexports.BindingFileManager = BindingFileManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BindingImportListExtender = void 0;\nconst mdt_client_1 = require(\"mdt-client\");\nconst Importer_1 = require(\"./Importer\");\nconst Exporter_1 = require(\"./Exporter\");\nclass BindingImportListExtender {\n    constructor(list, options = {}) {\n        this.list = list;\n        this.options = options;\n        this.api = mdt_client_1.legacy.ApiServiceInstance;\n        const listFacade = new mdt_client_1.List(list);\n        const currentTableId = list.table.id;\n        let query = {\n            filter: mdt_client_1.Filter.eq(\"ID_ObjectBinding\", currentTableId),\n            top: 1\n        };\n        this.api.fetch(query, \"bind.Settings\").then((r) => {\n            if (r.records.length == 0)\n                return;\n            listFacade.addCommand({\n                title: () => \"Import\",\n                code: \"binding-import\",\n                icon: \"upload\",\n                execute: () => {\n                    (0, Importer_1.importFromExcel)(listFacade, r.records[0]);\n                }\n            });\n            listFacade.addCommand({\n                title: () => \"Export\",\n                code: \"binding-export\",\n                icon: \"download\",\n                execute: () => {\n                    (0, Exporter_1.exportToExcel)(listFacade, r.records[0]);\n                }\n            });\n        });\n    }\n}\nexports.BindingImportListExtender = BindingImportListExtender;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BindingUploadCtrl = void 0;\nconst mdt_client_1 = require(\"mdt-client\");\nclass BindingUploadCtrl {\n    constructor(parent) {\n        this.parent = parent;\n        this.$view = () => {\n            const header = (0, mdt_client_1.m)(\".field-view-label-wrap\", (0, mdt_client_1.m)(\".field-label-wrapper\", (0, mdt_client_1.m)(\"label.field-label-view field-plain-label-view\", (0, mdt_client_1.m)(\"span.field-label-view-title\", mdt_client_1.Utils.getText(\"formControl:File\")))));\n            return (0, mdt_client_1.m)(\"div.form-group\", [header, mdt_client_1.legacy.view(this.fileCtrl)]);\n        };\n        this.fileCtrl = new mdt_client_1.legacy.FileInputCtrl({\n            uploadUrl: () => \"file/upload\",\n            downloadUrl: () => null,\n            value: () => this.fileName,\n            clear: () => {\n                parent.setContext(\"fileUID\", null);\n                this.fileName = null;\n            },\n            text: () => this.fileName,\n            type: \"default\",\n            uploaded: (r) => this.init(r)\n        });\n    }\n    init(r = {}) {\n        this.fileName = r.name;\n        this.parent.setContext(\"fileUID\", r.uid);\n    }\n}\nexports.BindingUploadCtrl = BindingUploadCtrl;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"../_core/module\");\n"],"names":[],"sourceRoot":""}